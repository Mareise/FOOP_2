ColorMappingCanvas subclass: #AnimColorMappingCanvas	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Animations-Canvas'!!AnimColorMappingCanvas commentStamp: 'mt 5/17/2010 08:42:09.163' prior: 0!This is an extended version of the ColorMappingCanvas that supports more functionality of a FormCanvas.!!AnimColorMappingCanvas methodsFor: 'converting' stamp: 'mt 4/17/2011 16:25:59.037'!convertForm: aForm	"Pixel-wise color mapping for very small forms. Performance reasons."		aForm extent <= (64@64)		ifTrue: [^ aForm collectColors: [:color | self mapColor: color]].			^ aForm! !!AnimColorMappingCanvas methodsFor: 'drawing-polygons' stamp: 'mt 5/17/2010 16:06:11.153'!drawPolygon: vertices color: aColor borderWidth: bw borderColor: bc	^ myCanvas		drawPolygon: vertices		color: (self mapColor: aColor)		borderWidth: bw		borderColor: (self mapColor: bc)! !!AnimColorMappingCanvas methodsFor: 'drawing-polygons' stamp: 'mt 5/17/2010 16:04:29.867'!drawPolygon: vertices fillStyle: aFillStyle borderWidth: bw borderColor: bc	^ myCanvas		drawPolygon: vertices		fillStyle: (self mapFillStyle: aFillStyle)		borderWidth: bw		borderColor: (self mapColor: bc)! !!AnimColorMappingCanvas methodsFor: 'drawing-rectangles' stamp: 'mt 1/2/2012 17:50:43.288'!fillRectangle: aRectangle fillStyle: aFillStyle	^ myCanvas		fillRectangle: aRectangle		fillStyle: (self mapFillStyle: aFillStyle)! !!AnimColorMappingCanvas methodsFor: 'drawing-rectangles' stamp: 'mt 4/8/2011 12:30:19.27'!fillRoundRect: aRectangle radius: radius fillStyle: aFillStyle	^ myCanvas		fillRoundRect: aRectangle		radius: radius		fillStyle: (self mapFillStyle: aFillStyle)! !!AnimColorMappingCanvas methodsFor: 'drawing-rectangles' stamp: 'mt 5/17/2010 08:48:29.968'!frameAndFillRoundRect: aRectangle radius: cornerRadius fillStyle: fillStyle borderWidth: bw borderColor: bc	^ myCanvas		frameAndFillRoundRect: aRectangle		radius: cornerRadius		fillStyle: (self mapFillStyle: fillStyle)		borderWidth: bw		borderColor: (self mapColor: bc)! !!AnimColorMappingCanvas methodsFor: 'drawing-rectangles' stamp: 'mt 6/16/2010 18:11:22.96'!frameRoundRect: aRectangle radius: radius width: borderWidth color: borderColor	^ myCanvas		frameRoundRect: aRectangle		radius: radius		width: borderWidth		color: (self mapColor: borderColor)! !!AnimColorMappingCanvas methodsFor: 'private' stamp: 'mt 6/22/2010 15:37:45.46'!image: aForm at: aPoint sourceRect: sourceRect rule: rule	^ myCanvas		image: (self convertForm: aForm)		at: aPoint		sourceRect: sourceRect		rule: rule.! !!AnimColorMappingCanvas methodsFor: 'private' stamp: 'mt 5/17/2010 08:51:56.569'!mapFillStyle: aFillStyle	^ self mapColor: aFillStyle asColor! !!AnimColorMappingCanvas methodsFor: 'accessing - private' stamp: 'mt 5/17/2010 16:27:35.517'!myCanvas	^ myCanvas! !!AnimColorMappingCanvas methodsFor: 'accessing' stamp: 'mt 6/7/2010 15:26:00.446'!originalCanvas	"Return the original canvas without color mappings."		| originalCanvas |	originalCanvas := myCanvas.	[originalCanvas isKindOf: AnimColorMappingCanvas]		whileTrue: [originalCanvas := originalCanvas myCanvas].	^ originalCanvas! !!AnimColorMappingCanvas methodsFor: 'drawing' stamp: 'mt 11/16/2010 20:13'!paragraph: paragraph bounds: bounds color: c	| textColors oldColors |	textColors := OrderedCollection new.	paragraph text runs values do: [:array |		array do: [:attr | (attr isKindOf: TextColor)			ifTrue: [textColors addIfNotPresent: attr]]].	oldColors := textColors collect: [:tc | tc color].	textColors do: [:tc | tc color: (self mapColor: tc color)].	super paragraph: paragraph bounds: bounds color: c.	textColors withIndexDo: [:tc :i| tc color: (oldColors at: i)].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AnimColorMappingCanvas class	instanceVariableNames: ''!!AnimColorMappingCanvas class methodsFor: 'defaults' stamp: 'mt 5/17/2010 11:13:08.779'!defaultRule	^ Form paint! !AnimColorMappingCanvas subclass: #AnimAlphaBlendingCanvas	instanceVariableNames: 'alpha'	classVariableNames: ''	poolDictionaries: ''	category: 'Animations-Canvas'!!AnimAlphaBlendingCanvas methodsFor: 'accessing' stamp: 'mt 5/17/2010 08:43:12.954'!alpha	^ alpha ifNil: [alpha := 1.0]! !!AnimAlphaBlendingCanvas methodsFor: 'accessing' stamp: 'mt 5/17/2010 08:43:21.706'!alpha: aFloat	alpha := aFloat.! !!AnimAlphaBlendingCanvas methodsFor: 'private' stamp: 'mt 6/22/2010 15:36:30.494'!image: aForm at: aPoint sourceRect: sourceRect rule: rule	| convertedForm applyStaticAlpha |	convertedForm := self convertForm: aForm.	applyStaticAlpha := convertedForm == aForm.	applyStaticAlpha ifFalse: [		^ myCanvas			image: convertedForm			at: aPoint			sourceRect: sourceRect			rule: rule		].	rule = Form blend ifTrue: [		^ myCanvas			image: convertedForm			at: aPoint			sourceRect: sourceRect			rule: Form blendAlpha			alpha: alpha		].		rule = Form paint ifTrue:[		^myCanvas			image: convertedForm			at: aPoint			sourceRect: sourceRect			rule: Form paintAlpha			alpha: alpha.	].	rule = Form over ifTrue:[		^myCanvas			image: convertedForm			at: aPoint			sourceRect: sourceRect			rule: Form blendAlpha			alpha: alpha.	].! !!AnimAlphaBlendingCanvas methodsFor: 'private' stamp: 'mt 5/17/2010 08:44:00.672'!mapColor: aColor	aColor isTransparent		ifTrue:[^aColor].			aColor isOpaque		ifTrue:[^aColor alpha: alpha].			^ aColor alpha: (aColor alpha * alpha)! !!AnimAlphaBlendingCanvas methodsFor: 'private' stamp: 'mt 1/2/2012 17:53:12.578'!mapFillStyle: aFillStyle	self alpha = 1.0		ifTrue: [^ aFillStyle].		aFillStyle isSolidFill 		ifTrue: [^ self mapColor: aFillStyle asColor].		"Expensive?"	^ aFillStyle copy colorRamp: (aFillStyle colorRamp collect: [:assoc | assoc key -> (self mapColor: assoc value)])! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AnimAlphaBlendingCanvas class	instanceVariableNames: ''!!AnimAlphaBlendingCanvas class methodsFor: 'defaults' stamp: 'mt 5/17/2010 11:44:12.838'!defaultRule	^ Form blendAlpha! !AnimColorMappingCanvas subclass: #AnimBrightnessMappingCanvas	instanceVariableNames: 'brightness'	classVariableNames: ''	poolDictionaries: ''	category: 'Animations-Canvas'!!AnimBrightnessMappingCanvas methodsFor: 'accessing' stamp: 'mt 5/14/2010 18:31:07.653'!brightness	^ brightness ifNil: [brightness := 1.0]! !!AnimBrightnessMappingCanvas methodsFor: 'accessing' stamp: 'mt 5/14/2010 18:31:23.54'!brightness: aFloat	brightness := aFloat.! !!AnimBrightnessMappingCanvas methodsFor: 'accessing' stamp: 'mt 5/17/2010 16:20:07.651'!mapColor: aColor	^ Color		h: aColor hue		s: aColor saturation		v: (aColor brightness * self brightness min: 1.0 max: 0.0)		alpha: aColor alpha! !AnimColorMappingCanvas subclass: #AnimGrayscaleMappingCanvas	instanceVariableNames: 'ratio'	classVariableNames: ''	poolDictionaries: ''	category: 'Animations-Canvas'!!AnimGrayscaleMappingCanvas methodsFor: 'private' stamp: 'mt 5/15/2010 18:33:38.8'!mapColor: aColor	| avg |	avg := { aColor red. aColor green. aColor blue } average.	^ Color		r: aColor red + ((avg - aColor red) * self ratio)		g: aColor green + ((avg - aColor green) * self ratio)		b: aColor blue + ((avg - aColor blue) * self ratio)		alpha: aColor alpha! !!AnimGrayscaleMappingCanvas methodsFor: 'accessing' stamp: 'mt 5/15/2010 14:09:57.057'!ratio	^ ratio ifNil: [ratio := 1.0]! !!AnimGrayscaleMappingCanvas methodsFor: 'accessing' stamp: 'mt 5/15/2010 14:10:34.456'!ratio: aFloat	"Set the ratio between 0.0 for no change and 1.0 for grayscale."		ratio := aFloat.! !AnimColorMappingCanvas subclass: #AnimSaturationMappingCanvas	instanceVariableNames: 'saturation'	classVariableNames: ''	poolDictionaries: ''	category: 'Animations-Canvas'!!AnimSaturationMappingCanvas methodsFor: 'private' stamp: 'mt 5/15/2010 12:33:37.419'!mapColor: aColor	^ Color		h: aColor hue		s: (aColor saturation * self saturation min: 1.0 max: 0.0)		v: aColor brightness		alpha: aColor alpha! !!AnimSaturationMappingCanvas methodsFor: 'accessing' stamp: 'mt 5/14/2010 18:34:59.635'!saturation	^ saturation ifNil: [saturation := 1.0]! !!AnimSaturationMappingCanvas methodsFor: 'accessing' stamp: 'mt 5/14/2010 18:35:10.374'!saturation: aFloat	saturation := aFloat.! !