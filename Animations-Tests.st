Object subclass: #AnimSignalSpy	instanceVariableNames: 'object signals'	classVariableNames: ''	poolDictionaries: ''	category: 'Animations-Tests'!!AnimSignalSpy commentStamp: 'mt 5/14/2010 11:09:41.178' prior: 0!I am a support class to test the Squeak changed/update mechanism. Should only be used within one thread/process.!!AnimSignalSpy methodsFor: 'accessing' stamp: 'mt 5/14/2010 11:12:02.191'!lastArguments	self signals ifEmpty: [Error signal: 'No signals were caught.'].	^ self signals last second! !!AnimSignalSpy methodsFor: 'accessing' stamp: 'mt 5/14/2010 11:11:29.309'!lastSignal	self signals ifEmpty: [Error signal: 'No signals were caught.'].	^ self signals last first! !!AnimSignalSpy methodsFor: 'accessing' stamp: 'mt 5/14/2010 11:11:42.717'!lastSignalWithArguments	self signals ifEmpty: [Error signal: 'No signals were caught.'].	^ self signals last! !!AnimSignalSpy methodsFor: 'accessing' stamp: 'mt 5/14/2010 11:05:57.559'!object	^ object! !!AnimSignalSpy methodsFor: 'accessing' stamp: 'mt 5/14/2010 11:06:30.624'!signals	^ signals ifNil: [signals := OrderedCollection new]! !!AnimSignalSpy methodsFor: 'accessing - private' stamp: 'mt 5/14/2010 11:07:25.5'!object: anObject	object := anObject.	object addDependent: self.! !!AnimSignalSpy methodsFor: 'spying' stamp: 'mt 5/14/2010 11:25:24.605'!update: aSignal	self signals add: {aSignal. nil}.! !!AnimSignalSpy methodsFor: 'spying' stamp: 'mt 5/14/2010 11:25:43.285'!update: aSignal with: oneOrMoreArguments	self signals add: {aSignal. oneOrMoreArguments}.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AnimSignalSpy class	instanceVariableNames: ''!!AnimSignalSpy class methodsFor: 'instance creation' stamp: 'mt 5/14/2010 11:07:44.811'!on: anObject	^ self new		object: anObject! !TestCase subclass: #AnimTimedAnimationTest	instanceVariableNames: 'referenceTime sut'	classVariableNames: ''	poolDictionaries: ''	category: 'Animations-Tests'!!AnimTimedAnimationTest methodsFor: 'running' stamp: 'mt 5/14/2010 12:48:23.036'!setUp	super setUp.	referenceTime := WorldState lastCycleTime.! !!AnimTimedAnimationTest methodsFor: 'support' stamp: 'mt 5/14/2010 12:48:59.212'!wait: milliseconds	"Wait some time in terms of the main world cycle."		sut updateCurrentTime: referenceTime.	referenceTime := referenceTime + milliseconds.		sut updateCurrentTime: referenceTime.! !AnimTimedAnimationTest subclass: #AnimAnimationRegistryTest	instanceVariableNames: 'morph'	classVariableNames: ''	poolDictionaries: ''	category: 'Animations-Tests'!!AnimAnimationRegistryTest methodsFor: 'running' stamp: 'mt 6/16/2010 12:06:26.976'!setUp	super setUp.	morph := Morph new.	sut := AnimGraphicsAnimation new		morph: morph;		duration: 5000.! !!AnimAnimationRegistryTest methodsFor: 'tests' stamp: 'mt 6/16/2010 12:10:25.069'!testMorphDeletion	AnimAnimationRegistry reset.	self assert: AnimAnimationRegistry main graphicsAnimations isEmpty.	sut := AnimGraphicsAnimation new		morph: Morph new;		duration: 5000;		register.	self assert: 1 equals: AnimAnimationRegistry main graphicsAnimations size.		Smalltalk garbageCollect.	AnimAnimationRegistry main garbageCollect.		self assert: AnimAnimationRegistry main graphicsAnimations isEmpty.! !AnimTimedAnimationTest subclass: #AnimAnimationTest	instanceVariableNames: 'spy'	classVariableNames: ''	poolDictionaries: ''	category: 'Animations-Tests'!!AnimAnimationTest methodsFor: 'running' stamp: 'mt 6/7/2010 15:23:41.44'!setUp	super setUp.	sut := AnimAnimation new		duration: 10.	spy := AnimSignalSpy on: sut.! !!AnimAnimationTest methodsFor: 'tests' stamp: 'mt 5/12/2010 11:50:16.816'!testAnimationEndState			sut		duration: 50;		loopCount: 2;		start.			self wait: 100.		self		should: sut isStopped;		should: sut currentLoop = 2;		should: sut currentLoopTime = 49;		should: sut currentTime = 99.		sut		resetAfterFinished: true;		start.			self wait: 100.		self		should: sut isStopped;		should: sut currentLoop = 1;		should: sut currentLoopTime = 0;		should: sut currentTime = 0.! !!AnimAnimationTest methodsFor: 'tests' stamp: 'mt 5/12/2010 11:53:04.34'!testAnimationStates			self should: sut isStopped.			sut		duration: 50;		start.		self		should: sut isRunning;		wait: 25;		should: sut isRunning.			sut pause.		self should: sut isPaused.		sut resume.		self		should: sut isRunning;		wait: 25;		should: sut isStopped.! !!AnimAnimationTest methodsFor: 'tests' stamp: 'mt 5/12/2010 11:58:56.127'!testInfiniteAnimation	"This tests also possible time jumps."		sut		duration: 50;		loopCount: -1;		start.			self wait: 500..		self		should: sut isRunning;		should: sut currentLoop = 11;		should: sut currentLoopTime = 0;		should: sut currentTime = 500.! !!AnimAnimationTest methodsFor: 'tests' stamp: 'mt 5/14/2010 11:25:15.675'!testOtherSignals	sut		duration: 50;		loopCount: 2;		direction: #backward.		self		should: spy lastSignal = #directionChanged;		should: spy lastArguments = {#backward}.			sut start.	self		wait: 51;		should: spy lastSignal = #currentLoopChanged;		should: spy lastArguments = 2;		wait: 50;		should: spy lastSignal = #finished.! !!AnimAnimationTest methodsFor: 'tests' stamp: 'mt 5/12/2010 11:56:24.945'!testPause				sut		duration: 50;		start.		self wait: 25.		sut pause.		self		should: sut isPaused;		should: sut currentTime = 25;		wait: 25;		should: sut isPaused;		should: sut currentTime = 25.			sut resume.		self		should: sut isRunning;		should: sut currentTime = 25;		wait: 25;		should: sut isStopped;		should: sut currentTime = 49.! !!AnimAnimationTest methodsFor: 'tests' stamp: 'mt 5/14/2010 11:19:06.573'!testSignals	sut		duration: 50;		start.		self		should: spy lastSignal = #stateChanged;		should: spy lastArguments = {#stopped. #running}.			sut pause.	self		should: spy lastSignal = #stateChanged;		should: spy lastArguments = {#running. #paused}.			sut stop.	self		should: spy lastSignal = #stateChanged;		should: spy lastArguments = {#paused. #stopped}.			sut		start;		stop.		self		should: spy lastSignal = #stateChanged;		should: spy lastArguments = {#running. #stopped}.! !!AnimAnimationTest methodsFor: 'tests' stamp: 'mt 5/12/2010 11:45:59.651'!testSimpleAnimation	self		should: sut isStopped;		should: sut currentLoop = 1;		should: sut currentLoopTime = 0;		should: sut currentTime = 0;		should: sut loopCount = 1.			sut		duration: 50;		start.			self wait: 25.		self		should: sut isRunning;		should: sut currentLoop = 1;		should: sut currentLoopTime = 25;		should: sut currentTime = 25.			self wait: 25.		self		should: sut isStopped;		should: sut currentLoop = 1;		should: sut currentLoopTime = 49;		should: sut currentTime = 49.	! !!AnimAnimationTest methodsFor: 'tests' stamp: 'mt 5/12/2010 12:00:51.331'!testStartAnimation		sut		duration: 50;		start.		self wait: 25.		sut start.		self should: sut currentTime = 25.		sut		stop;		start.			self should: sut currentTime = 0.! !!AnimAnimationTest methodsFor: 'tests' stamp: 'mt 5/14/2010 11:19:20.924'!testStateSignals	sut		duration: 50;		start.		self		should: spy lastSignal = #stateChanged;		should: spy lastArguments = {#stopped. #running}.			sut pause.	self		should: spy lastSignal = #stateChanged;		should: spy lastArguments = {#running. #paused}.			sut stop.	self		should: spy lastSignal = #stateChanged;		should: spy lastArguments = {#paused. #stopped}.			sut		start;		stop.		self		should: spy lastSignal = #stateChanged;		should: spy lastArguments = {#running. #stopped}.! !!AnimAnimationTest methodsFor: 'tests' stamp: 'mt 5/14/2010 11:13:35.239'!testStopAnimation		sut		duration: 50;		start.		self 		wait: 25;		should: sut currentTime = 25.		sut stop.			self should: sut currentTime = 0.! !!AnimAnimationTest methodsFor: 'tests' stamp: 'mt 5/12/2010 11:51:01.127'!testTotalDuration		sut		duration: 50;		loopCount: 2.			self should: sut totalDuration = 100.! !AnimTimedAnimationTest subclass: #AnimGraphicsAnimationTest	instanceVariableNames: 'canvas morph'	classVariableNames: ''	poolDictionaries: ''	category: 'Animations-Tests'!!AnimGraphicsAnimationTest methodsFor: 'running' stamp: 'mt 5/15/2010 12:00:51.951'!setUp	super setUp.	morph := Morph new.	canvas := FormCanvas extent: morph extent.! !!AnimGraphicsAnimationTest methodsFor: 'testing' stamp: 'mt 6/7/2010 15:24:37.611'!testAlphaBlendFadeIn	sut := AnimAlphaBlendAnimation fadeInOn: morph duration: 50.	sut start.		self		wait: 0;		should: (sut transformedCanvas: canvas) alpha = 0.0;		wait: 25;		should: ((sut transformedCanvas: canvas) alpha roundTo: 0.1) = 0.5;		wait: 25;		should: ((sut transformedCanvas: canvas) alpha roundTo: 0.1) = 1.0.! !!AnimGraphicsAnimationTest methodsFor: 'testing' stamp: 'mt 6/7/2010 15:24:37.661'!testAlphaBlendFadeOut	sut := AnimAlphaBlendAnimation fadeOutOn: morph duration: 50.	sut start.		self		wait: 0;		should: (sut transformedCanvas: canvas) alpha = 1.0;		wait: 25;		should: ((sut transformedCanvas: canvas) alpha roundTo: 0.1) = 0.5;		wait: 25;		should: ((sut transformedCanvas: canvas) alpha roundTo: 0.1) = 0.0.! !!AnimGraphicsAnimationTest methodsFor: 'testing' stamp: 'mt 6/7/2010 15:24:50.649'!testBrightnessColorMapping	| color |	color := Color blue.	sut := AnimBrightnessAnimation darkenOn: morph to: 0.5 duration: 50.	sut start.		self		should: color brightness = 1.0;		wait: 0;		should: ((sut transformedCanvas: canvas) mapColor: color) brightness = 1.0;		wait: 25;		should: (((sut transformedCanvas: canvas) mapColor: color) brightness roundTo: 0.01) = 0.74;		wait: 25;		should: (((sut transformedCanvas: canvas) mapColor: color) brightness roundTo: 0.1) = 0.5.! !!AnimGraphicsAnimationTest methodsFor: 'testing' stamp: 'mt 6/7/2010 15:24:50.723'!testDarken	sut := AnimBrightnessAnimation darkenOn: morph to: 0.5 duration: 50.	sut start.		self		wait: 0;		should: (sut transformedCanvas: canvas) brightness = 1.0;		wait: 25;		should: ((sut transformedCanvas: canvas) brightness roundTo: 0.01) = 0.74;		wait: 25;		should: ((sut transformedCanvas: canvas) brightness roundTo: 0.1) = 0.5.! !!AnimGraphicsAnimationTest methodsFor: 'testing' stamp: 'mt 6/7/2010 15:25:12.383'!testGrayscale	| color mappedColor|	color := Color r: 0.4 g: 0.6 b: 0.5 alpha: 1.0.	sut := AnimGrayscaleAnimation grayOutOn: morph duration: 50.	sut start.		self wait: 50.		mappedColor := (sut transformedCanvas: canvas) mapColor: color.		self		should: (mappedColor red roundTo: 0.1) = 0.5;		should: (mappedColor green roundTo: 0.1) = 0.5;		should: (mappedColor blue roundTo: 0.1) = 0.5.! !AnimTimedAnimationTest subclass: #AnimPropertyAnimationTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Animations-Tests'!!AnimPropertyAnimationTest methodsFor: 'tests' stamp: 'mt 6/24/2010 19:51:15.192'!testFloats	| valueHolder |	valueHolder := ValueHolder new contents: 0.0.	sut := (AnimPropertyAnimation		on: valueHolder		property: #contents		start: 0.0		end: 0.3234234234		duration: 200)		start.		300 timesRepeat: [self wait: 1].		self should: valueHolder contents = 0.3234234234.! !!AnimPropertyAnimationTest methodsFor: 'tests' stamp: 'mt 6/24/2010 19:52:22.301'!testFloatsReversed	| valueHolder |	valueHolder := ValueHolder new contents: 0.0.	sut := (AnimPropertyAnimation		on: valueHolder		property: #contents		start: 0.3234234234		end: 0.0		duration: 200)		start.		300 timesRepeat: [self wait: 1].		self should: valueHolder contents = 0.0.! !!AnimPropertyAnimationTest methodsFor: 'tests' stamp: 'mt 6/24/2010 19:59:42.459'!testFloatsReversed2	| valueHolder |	valueHolder := ValueHolder new contents: 0.0.	sut := (AnimPropertyAnimation		on: valueHolder		property: #contents		start: 0.3		end: 0.0		duration: 200)		start.		self wait: 500.		self should: valueHolder contents = 0.0.! !!AnimPropertyAnimationTest methodsFor: 'tests' stamp: 'mt 6/7/2010 15:25:32.09'!testMorphPositionChange	| morph |	morph := Morph new.	sut := (AnimPropertyAnimation		on: morph		property: #position		start: 0@0		end: 6@12		duration: 50)		start.			self		wait: 25;		should: morph position = (3@6);		wait: 25;		should: morph position = (6@12).! !!AnimPropertyAnimationTest methodsFor: 'tests' stamp: 'mt 6/7/2010 15:25:32.057'!testMorphPositionChangeWithOffset	| morph |	morph := Morph new.	sut := (AnimPropertyAnimation		on: morph		property: #position		start: 0@0		end: 6@12		duration: 50)		offset: 10@10;		start.			self		wait: 25;		should: morph position = (13@16);		wait: 25;		should: morph position = (16@22).! !!AnimPropertyAnimationTest methodsFor: 'tests' stamp: 'mt 6/7/2010 15:25:32.139'!testMorphPositionChangeWithOffsetBlock	| morph |	morph := Morph new.	sut := (AnimPropertyAnimation		on: morph		property: #position		start: 0@0		end: 6@12		duration: 50)		offsetBlock: [10@10];		start.			self		wait: 25;		should: morph position = (13@16);		wait: 25;		should: morph position = (16@22).! !!AnimPropertyAnimationTest methodsFor: 'support' stamp: 'mt 5/14/2010 15:09:22.249'!wait: milliseconds	super wait: milliseconds.	sut updateCurrentValue.! !AnimTimedAnimationTest subclass: #AnimVariantAnimationTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Animations-Tests'!!AnimVariantAnimationTest methodsFor: 'running' stamp: 'mt 6/7/2010 15:23:51.684'!setUp	super setUp.	sut := AnimVariantAnimation new.! !!AnimVariantAnimationTest methodsFor: 'testing' stamp: 'mt 6/7/2010 15:27:00.622'!testLinearInterpolation	sut		easingCurve: AnimEasingCurve linear;		duration: 50;		startValue: 1;		endValue: 50;		start.			self		should: sut currentValue rounded = 1;		wait: 25;		should: sut currentValue rounded = 26;		wait: 60;		should: sut isStopped;		should: sut currentValue rounded = 50.! !