ImageMorph subclass: #ScuItem	instanceVariableNames: 'game variation'	classVariableNames: ''	poolDictionaries: ''	category: 'Scu007-Items'!!ScuItem commentStamp: 'Matthias Springer 2/4/2012 22:23:31.989' prior: 0!A ScuItem is a decorator for ScuTiles. It adds functionality and appearance dynamically. More than one ScuItem can be on one Tile.Instance Variables	game:		Reference to the game.	propertyAnimation:		Animation for the item, e.g. a moving animation.	variation:		Special design for the item, e.g. floor looks different depending on neighbor tiles.!!ScuItem methodsFor: 'event handling' stamp: 'Malte Swart 1/3/2012 17:22:27.352'!checkedIn: aTile! !!ScuItem methodsFor: 'event handling' stamp: 'Malte Swart 1/10/2012 11:45:51.152'!checkedOut: aTile! !!ScuItem methodsFor: 'event handling' stamp: 'kf 2/4/2012 20:07:00.758'!notifyAbout: aMessage from: aSender to: aRecipient with: aPayload	"Handles no events, but provides a dummy function to prevent errors when performing events on an item not supporting events."	^ nil! !!ScuItem methodsFor: 'event handling' stamp: 'kf 2/4/2012 18:51:05.655'!send: aMessage from: aSender to: aRecipient with: aPayload	^ self game eventDispatcher send: aMessage from: aSender to: aRecipient with: aPayload! !!ScuItem methodsFor: 'event handling' stamp: 'msw 2/10/2012 12:38:29.972'!send: aMessage to: aRecipient with: aPayload	^ self send: aMessage from: self to: aRecipient with: aPayload.! !!ScuItem methodsFor: 'initialize-release' stamp: 'Matthias Springer 2/9/2012 15:18:46.952'!delete	self tileUnder ifNotNil: [self tileUnder checkOut: self].	self game eventDispatcher unregister: self.	^ super delete! !!ScuItem methodsFor: 'initialize-release' stamp: 'Matthias Springer 2/10/2012 19:25'!gameInitialize	self game state shouldDraw		ifTrue: [self draw].! !!ScuItem methodsFor: 'render' stamp: 'dominik 2/4/2012 17:45:27.376'!doFadeInAnimation	self doFadeInAnimationWithDuration: 500! !!ScuItem methodsFor: 'render' stamp: 'dominik 2/4/2012 17:45:37.344'!doFadeInAnimationWithDuration: aNumber	self show.	(AnimAlphaBlendAnimation fadeInOn: self duration: aNumber)		register;		start: #deleteWhenFinished.! !!ScuItem methodsFor: 'render' stamp: 'Matthias Springer 1/31/2012 21:21:58.005'!draw	self 		extent: self game configuration tileSize;		color: Color transparent;		drawImage.! !!ScuItem methodsFor: 'render' stamp: 'Matthias Springer 1/31/2012 21:22:04.222'!drawImage	| form |	form := self game resources formFor: self itemSymbol inVariation: self variation.	(form ~= self form) ifTrue: [self newForm: form].! !!ScuItem methodsFor: 'render' stamp: 'Matthias Springer 1/31/2012 22:18:20.515'!variation	variation ifNil: [self variation: ''].   	^ variation! !!ScuItem methodsFor: 'render' stamp: 'Matthias Springer 1/31/2012 21:23:33.84'!variation: anObject	variation := anObject.! !!ScuItem methodsFor: 'render' stamp: 'Matthias Springer 1/31/2012 21:23:38.928'!zIndex	self subclassResponsibility.! !!ScuItem methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:18:13.283'!game	game ifNil: [self game: self tileUnder game]. 	^ game! !!ScuItem methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 21:22:31.359'!game: anObject	game := anObject.! !!ScuItem methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:18:16.045'!tileUnder	^ self owner! !!ScuItem methodsFor: 'permits' stamp: 'Matthias Springer 1/31/2012 21:22:48.863'!itemSymbol	self subclassResponsibility.! !!ScuItem methodsFor: 'stepping and presenter' stamp: 'msw 2/9/2012 16:34:38.81'!stepAt: millisecondClockValue	(self game isNil or: [ self game state allowMoving ]) 		ifTrue: [^ super stepAt: millisecondClockValue].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ScuItem class	instanceVariableNames: ''!!ScuItem class methodsFor: 'instance creation' stamp: 'Matthias Springer 2/6/2012 17:37:10.202'!newIn: aGame	^ self basicNew		game: aGame;		initialize;		gameInitialize;		yourself! !ScuItem subclass: #ScuDestructibleItem	instanceVariableNames: 'health'	classVariableNames: ''	poolDictionaries: ''	category: 'Scu007-Items'!!ScuDestructibleItem commentStamp: 'Matthias Springer 2/4/2012 22:24:24.07' prior: 0!A ScuDestructableItem is an item which can take damage.Instance Variables	health:		An integer health value.!!ScuDestructibleItem methodsFor: 'event handling' stamp: 'Matthias Springer 1/31/2012 21:23:55.569'!checkedIn: aTile	self game 		ifNotNil: [self game eventDispatcher register: self for: aTile].    ! !!ScuDestructibleItem methodsFor: 'event handling' stamp: 'Matthias Springer 1/31/2012 21:24:14.513'!checkedOut: aTile	self game 		ifNotNil: [self game eventDispatcher unregister: self from: aTile].! !!ScuDestructibleItem methodsFor: 'event handling' stamp: 'Matthias Springer 2/10/2012 19:28'!notifyAbout: aMessage from: aSender to: aRecipient with: aPayload	((aMessage == #damage) and: 	(aRecipient == self tileUnder))		ifTrue: [^ self takeDamage: aPayload from: aSender].	^ super notifyAbout: aMessage from: aSender to: aRecipient with: aPayload! !!ScuDestructibleItem methodsFor: 'event handling' stamp: 'kf 2/4/2012 21:20:00.022'!takeDamage: anAmount from: aDamageDealer	self health: (self health - anAmount).	(self deceased)		ifTrue: [self deceaseBy: aDamageDealer. ^ (anAmount + self health)]		ifFalse: [^ anAmount].	! !!ScuDestructibleItem methodsFor: 'actions' stamp: 'kf 2/4/2012 21:19:13.19'!deceaseBy: aDamageDealer	"Notice: deletion must occur BEFORE sending the deceased event (or at least, if deletion HAS to be moved behind sending, make sure you unregister with the event dispatcher before!!)."	self delete.	self send: #deceased to: nil with: aDamageDealer.! !!ScuDestructibleItem methodsFor: 'accessing' stamp: 'Matthias Springer 2/9/2012 16:04:36.146'!deceased	^ self health <= 0! !!ScuDestructibleItem methodsFor: 'accessing' stamp: 'Matthias Springer 2/9/2012 15:30:46.642'!health	health ifNil: [self health: 1].	^ health! !!ScuDestructibleItem methodsFor: 'accessing' stamp: 'Matthias Springer 2/9/2012 16:05:19.158'!health: aNumber	health := aNumber.! !ScuDestructibleItem subclass: #ScuBucket	instanceVariableNames: 'timeout parentItem distance damage washing isPrototype'	classVariableNames: ''	poolDictionaries: ''	category: 'Scu007-Items'!!ScuBucket commentStamp: 'Matthias Springer 2/4/2012 22:20:56.392' prior: 0!A ScuBucket is a bucket, which detonates after some time and creates water.Instance Variables	damage:		The amount of damage this bucket produces.	distance:		The number of tiles water can spread onto (in each direction).	isPrototype:		Determines whether this bucket is a prototype and should not detonate.	parentItem:		The player, who placed the bucket.	timeout:		The time until the bucket detonates.	washing:		Determines whether the bucket is currently washing, i.e. producing water.!!ScuBucket methodsFor: 'accessing' stamp: 'Matthias Springer 2/5/2012 12:41:54.077'!copyBucket	|tGame tParent clone|	tGame := self game.	tParent := self parentItem.	self game: nil; parentItem: nil.	clone := self veryDeepCopy.	self game: tGame; parentItem: tParent.	^ clone! !!ScuBucket methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:19:05.268'!damage	damage ifNil: [self damage: 1].	^ damage! !!ScuBucket methodsFor: 'accessing' stamp: 'kf 2/4/2012 18:49:50.071'!damage: anObject	damage := anObject.	self send: #bucketDamage from: self parentItem to: nil with: anObject.! !!ScuBucket methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:19:09.765'!distance	distance ifNil: [self distance: 1].	^ distance! !!ScuBucket methodsFor: 'accessing' stamp: 'kf 2/4/2012 19:06:09.926'!distance: anObject	distance := anObject.	self send: #bucketDistance from: self to: nil with: anObject.! !!ScuBucket methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:18:51.317'!isPrototype 	isPrototype ifNil: [self isPrototype: true].   	^ isPrototype! !!ScuBucket methodsFor: 'accessing' stamp: 'Matthias Springer 1/8/2012 13:27:38.298'!isPrototype: aBoolean	isPrototype := aBoolean.! !!ScuBucket methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:18:46.677'!parentItem	^ parentItem! !!ScuBucket methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 21:32:50.083'!parentItem: anObject	parentItem := anObject.! !!ScuBucket methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:18:56.031'!player	^ self parentItem! !!ScuBucket methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:18:58.316'!timeout	timeout ifNil: [self timeout: 25].	^ timeout! !!ScuBucket methodsFor: 'accessing' stamp: 'Matthias Springer 1/10/2012 11:19:29.727'!timeout: anObject 	(self isPrototype not or: anObject > 5) ifTrue: [timeout := anObject].! !!ScuBucket methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:19:03.02'!washing	washing ifNil: [self washing: false].	^ washing! !!ScuBucket methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 21:37:52.566'!washing: aBoolean	aBoolean ifTrue: [washing := true] ifFalse: [washing := false].! !!ScuBucket methodsFor: 'permits' stamp: 'Matthias Springer 1/31/2012 22:19:00.359'!enterPermissions	^ {#bucket}! !!ScuBucket methodsFor: 'permits' stamp: 'Matthias Springer 1/31/2012 22:19:07.67'!itemSymbol 	^ #bucket! !!ScuBucket methodsFor: 'permits' stamp: 'Matthias Springer 2/5/2012 00:31:36.973'!placedIn: aGame parentItem: aParentItem	self isPrototype: false.	self game: aGame.	self parentItem: aParentItem.	self gameInitialize.    ! !!ScuBucket methodsFor: 'actions' stamp: 'Matthias Springer 1/31/2012 21:34:51.536'!placeWater	(ScuWater newFrom: self into: nil reaching: (self distance) dealing: self damage)		checkOnto: self tileUnder.! !!ScuBucket methodsFor: 'actions' stamp: 'Matthias Springer 2/10/2012 11:41:55.04'!wash	self washing ifFalse: [		self washing: true.		self parentItem ifNotNil: [self parentItem bucketDeleted].		self placeWater.		self tileUnder checkOut: self].! !!ScuBucket methodsFor: 'stepping and presenter' stamp: 'Matthias Springer 2/10/2012 11:39:37.299'!step	self isPrototype 		ifFalse: [			self timeout: self timeout - 1.			(self timeout < 1) 				ifTrue: [self wash]].! !!ScuBucket methodsFor: 'stepping and presenter' stamp: 'Matthias Springer 1/31/2012 22:18:49.02'!stepTime	^ 100! !!ScuBucket methodsFor: 'event handling' stamp: 'Matthias Springer 2/10/2012 11:41:40.286'!takeDamage: anAmount from: aDamageDealer	self wash.	^ 0! !!ScuBucket methodsFor: 'render' stamp: 'Matthias Springer 1/31/2012 22:18:44.42'!zIndex	^ 40! !ScuItem subclass: #ScuFloor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Scu007-Items'!!ScuFloor commentStamp: 'dominik 2/4/2012 16:04:45.494' prior: 0!A ScuFloor is a ScuItem that adds floor behavior and appearance to a ScuTile.Instance Variables!!ScuFloor methodsFor: 'permits' stamp: 'Matthias Springer 1/31/2012 22:20:36.92'!itemSymbol 	^ #floor! !!ScuFloor methodsFor: 'render' stamp: 'Matthias Springer 2/4/2012 19:45:13.505'!variation	| neighbor toAppend|	variation ifNil: [ 		toAppend := ''.		self game configuration directions do: [:aDirection |  			neighbor := self tileUnder neighborAt: aDirection.			(neighbor isNil not and: [neighbor searchFor: #floor]) 				ifTrue: [toAppend := toAppend, '1'] 				ifFalse: [toAppend := toAppend, '0'].  			self variation: toAppend]].	^ variation! !!ScuFloor methodsFor: 'render' stamp: 'Matthias Springer 1/31/2012 22:20:38.896'!zIndex	^ 20! !ScuDestructibleItem subclass: #ScuMovingItem	instanceVariableNames: 'animationTime direction enterPermissions positionAnimation'	classVariableNames: ''	poolDictionaries: ''	category: 'Scu007-Items'!!ScuMovingItem commentStamp: 'Matthias Springer 2/4/2012 22:26:49.075' prior: 0!A ScuMovingItem is an Item that can move. It moves from one tile to another via the neighbor at linking. Preferably the enter permissions are checked beforehand. ScuMovingItems can pick up ScuPickUpItems.Instance Variables	animationTime:		Determines how long the animation endures.	direction:		Last moving direction.	enterPermissions:		The item can only enter tiles, where all items are contained in enterPermissions.!!ScuMovingItem methodsFor: 'moving' stamp: 'Matthias Springer 1/31/2012 21:38:16.183'!animateMovementFrom: currentTile to: nextTile callback: aBlock	nextTile comeToFront.	(self positionAnimation)		unregister;  		startValue: currentTile position;		endValue: nextTile position;		finishBlock: aBlock.	self positionAnimation 		start: #deleteWhenFinished; "Automatic registry clean-up. No need to unregister."		register.! !!ScuMovingItem methodsFor: 'moving' stamp: 'Matthias Springer 2/10/2012 19:26'!moveFrom: current to: nextTile withAnimation: aBool	(nextTile canIEnterWithPermissions: self enterPermissions default: false) ifTrue: [ 		nextTile checkIn: self withPositionChange: aBool not.		current checkOut: self. 		aBool ifTrue: [self animateMovementFrom: current to: nextTile callback: []].		self send: #objectMovement to: nextTile with: nil.		^ true].	^ false! !!ScuMovingItem methodsFor: 'moving' stamp: 'dominik 2/9/2012 17:01:28.27'!moveTo: aDirectionSymbol	| animationEnabled |	animationEnabled := self game configuration animationEnabled.	^ self moveTo: aDirectionSymbol withAnimation: animationEnabled! !!ScuMovingItem methodsFor: 'moving' stamp: 'Matthias Springer 1/31/2012 22:19:12.615'!moveTo: aDirectionSymbol withAnimation: aBool	| next current |	self deceased ifFalse: [		self direction: aDirectionSymbol.  		current := self tileUnder.		next := self tileUnder neighborAt: aDirectionSymbol.		next ifNotNil: [			(self moveFrom: current to: next withAnimation: aBool) ifTrue: [^ true]]].	^ false! !!ScuMovingItem methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:19:22.397'!animationTime	^ animationTime! !!ScuMovingItem methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 21:38:24.918'!animationTime: anObject	animationTime := anObject.! !!ScuMovingItem methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 21:38:27.542'!direction: anObject	direction := anObject.! !!ScuMovingItem methodsFor: 'accessing' stamp: 'msw 2/10/2012 12:50:15.988'!positionAnimation	positionAnimation ifNil: [  		self positionAnimation:			(AnimPropertyAnimation new				duration: self animationTime;				property: #position;				start: #deleteWhenFinished; "Automatic registry clean-up. No need to unregister."   				target: self)].	^ positionAnimation! !!ScuMovingItem methodsFor: 'accessing' stamp: 'msw 2/10/2012 12:48:54.099'!positionAnimation: anObject	positionAnimation := anObject.! !!ScuMovingItem methodsFor: 'permits' stamp: 'Matthias Springer 2/4/2012 22:12:37.776'!enterPermissions	self subclassResponsibility.! !!ScuMovingItem methodsFor: 'permits' stamp: 'Matthias Springer 2/4/2012 22:13:02.264'!enterPermissions: anObject	enterPermissions := anObject.! !ScuMovingItem subclass: #ScuMonster	instanceVariableNames: 'strategy'	classVariableNames: ''	poolDictionaries: ''	category: 'Scu007-Items'!!ScuMonster commentStamp: 'Matthias Springer 2/4/2012 22:27:50.053' prior: 0!A ScuMonster is a monster, which moves around and creates slime.Instance Variables	strategy:		The strategy determines, which tile the monster enters next.!!ScuMonster methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:19:32.15'!animationTime 	animationTime ifNil: [self animationTime: 600]. 	^ animationTime! !!ScuMonster methodsFor: 'event handling' stamp: 'Matthias Springer 1/31/2012 21:40:04.738'!checkedIn: aTile	(aTile searchFor: #slime) ifFalse: [aTile checkIn: (ScuSlime newIn: self game)].! !!ScuMonster methodsFor: 'event handling' stamp: 'msw 1/22/2012 20:47:16.409'!checkedOut: aTile! !!ScuMonster methodsFor: 'event handling' stamp: 'Matthias Springer 2/9/2012 15:37:34.664'!handleGameIsWon	^ self tileUnder notNil! !!ScuMonster methodsFor: 'event handling' stamp: 'Matthias Springer 2/10/2012 19:26'!notifyAbout: aMessage from: aSender to: aRecipient with: aPayload	(aMessage == #gameIsWon)		ifTrue: [ ^ self handleGameIsWon ].	^ super notifyAbout: aMessage from: aSender to: aRecipient with: aPayload! !!ScuMonster methodsFor: 'permits' stamp: 'Matthias Springer 1/31/2012 22:19:34.408'!enterPermissions	enterPermissions ifNil: [self enterPermissions: {#floor. #pickUpItem. #slime. #portal}].	^ enterPermissions! !!ScuMonster methodsFor: 'permits' stamp: 'Matthias Springer 1/31/2012 22:19:38.957'!itemSymbol 	^ #monster! !!ScuMonster methodsFor: 'initialize-release' stamp: 'kf 2/4/2012 23:11:52.152'!initialize	super initialize.	self game eventDispatcher register: self for: #all.! !!ScuMonster methodsFor: 'moving' stamp: 'Matthias Springer 2/4/2012 22:10:05.266'!move	| movingDirection |	movingDirection := self strategy move.	movingDirection ifNotNil: [self moveTo: movingDirection].! !!ScuMonster methodsFor: 'moving' stamp: 'dominik 2/4/2012 21:23:13.026'!strategy	strategy ifNil: [self strategy: (ScuMonsterToPlayerStrategy newIn: self game for: self)].	^ strategy! !!ScuMonster methodsFor: 'moving' stamp: 'Matthias Springer 1/8/2012 14:09:24.432'!strategy: anObject	strategy := anObject.! !!ScuMonster methodsFor: 'stepping and presenter' stamp: 'Matthias Springer 1/8/2012 19:34:00.954'!step	self move.! !!ScuMonster methodsFor: 'stepping and presenter' stamp: 'Matthias Springer 1/31/2012 22:19:29.863'!stepTime	^ 1000! !!ScuMonster methodsFor: 'render' stamp: 'Matthias Springer 1/31/2012 22:19:36.749'!zIndex	^ 90! !ScuDestructibleItem subclass: #ScuPickUpItem	instanceVariableNames: 'reactions'	classVariableNames: ''	poolDictionaries: ''	category: 'Scu007-Items'!!ScuPickUpItem commentStamp: 'Matthias Springer 2/10/2012 14:49:55.216' prior: 0!A ScuPickUpItem is an Item that can be picket up by a ScuMovingItem. It changes the behavior or parameters of the item that picks them up or the game in general. Instance Variables	reactions:		Mapping from item symbol to game effect (closure).!!ScuPickUpItem methodsFor: 'actions' stamp: 'Matthias Springer 2/6/2012 17:51:03.978'!at: anItemSymbol put: aClosure	self reactions at: anItemSymbol put: aClosure.! !!ScuPickUpItem methodsFor: 'actions' stamp: 'kf 2/4/2012 18:22:08.137'!react: anItem	(self reactions at: anItem itemSymbol ifAbsent: [[:item | ]]) value: anItem.	self delete.! !!ScuPickUpItem methodsFor: 'event handling' stamp: 'Matthias Springer 2/10/2012 19:26'!checkedIn: aTile	self game eventDispatcher register: self for: self tileUnder.	! !!ScuPickUpItem methodsFor: 'event handling' stamp: 'Matthias Springer 2/10/2012 19:26'!notifyAbout: aMessage from: aSender to: aRecipient with: aPayload	((aMessage == #objectMovement) and: (aRecipient == self tileUnder))		ifTrue: [ ^ self react: aSender ].	^ super notifyAbout: aMessage from: aSender to: aRecipient with: aPayload! !!ScuPickUpItem methodsFor: 'permits' stamp: 'Matthias Springer 1/31/2012 22:20:21.688'!itemSymbol	^ #pickUpItem! !!ScuPickUpItem methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:20:23.775'!reactions	reactions ifNil: [self reactions: IdentityDictionary new].	^ reactions! !!ScuPickUpItem methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 21:49:32.963'!reactions: anObject	reactions := anObject.! !!ScuPickUpItem methodsFor: 'render' stamp: 'Matthias Springer 1/31/2012 22:20:26.031'!zIndex	^ 25! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ScuPickUpItem class	instanceVariableNames: ''!!ScuPickUpItem class methodsFor: 'instance creation' stamp: 'msw 2/9/2012 20:22:52.837'!buildCakeIn: aGame	^ self buildIn: aGame		as: #cake		on: #player		do: [:anItem | 			| newMonsters builder | 			builder := aGame level builder.			newMonsters := OrderedCollection new.			aGame configuration monstersAtCakeAction timesRepeat:				[ newMonsters add: builder buildMonster ].			builder positionMonsters: newMonsters ]! !!ScuPickUpItem class methodsFor: 'instance creation' stamp: 'Matthias Springer 1/10/2012 11:09:39.945'!buildDecreaseBucketTimerIn: aGame	^ self buildIn: aGame		as: #fast		on: #player		do: [:anItem | anItem bucketPrototype timeout: anItem bucketPrototype timeout - 5]! !!ScuPickUpItem class methodsFor: 'instance creation' stamp: 'Matthias Springer 1/8/2012 13:52:36.068'!buildExtendDistanceIn: aGame	^ self buildIn: aGame		as: #extend		on: #player		do: [:anItem | anItem bucketPrototype distance: anItem bucketPrototype distance + 1]! !!ScuPickUpItem class methodsFor: 'instance creation' stamp: 'dominik 2/4/2012 13:44:12.833'!buildExtraLifeIn: aGame	^ self buildIn: aGame		as: #heart		on: #player		do: [:anItem | anItem health: anItem health + 1]! !!ScuPickUpItem class methodsFor: 'instance creation' stamp: 'Matthias Springer 2/6/2012 17:52:41.03'!buildIn: aGame as: aVariation on: anItemSymbol do: aClosure	^ (ScuPickUpItem newIn: aGame)		variation: aVariation;		draw;		at: anItemSymbol put: aClosure;		yourself! !!ScuPickUpItem class methodsFor: 'instance creation' stamp: 'Matthias Springer 2/4/2012 22:42:34.554'!buildIncreaseBucketsIn: aGame	^ self buildIn: aGame		as: #bucket		on: #player		do: [:anItem | anItem bucketsLeft: anItem bucketsLeft + 1]! !!ScuPickUpItem class methodsFor: 'instance creation' stamp: 'Matthias Springer 1/8/2012 13:33:11.591'!buildIncreaseDamageIn: aGame	^ self buildIn: aGame		as: #soap		on: #player		do: [:anItem | anItem bucketPrototype damage: anItem bucketPrototype damage + 1]! !!ScuPickUpItem class methodsFor: 'instance creation' stamp: 'Matthias Springer 2/4/2012 22:40:39.199'!buildPortalIn: aGame	^ self buildIn: aGame		as: #portal		on: #player		do: [:anItem | anItem portalsLeft: anItem portalsLeft + 1]! !!ScuPickUpItem class methodsFor: 'instance creation' stamp: 'dominik 2/5/2012 18:26:10.48'!buildRandomIn: aGame	| rand |	rand := aGame random next * 59.	(rand < 10) ifTrue: [ ^ self buildCakeIn: aGame ].	(rand < 20) ifTrue: [ ^ self buildPortalIn: aGame ].	(rand < 25) ifTrue: [ ^ self buildExtraLifeIn: aGame ].	(rand < 35) ifTrue: [ ^ self buildIncreaseDamageIn: aGame ].	(rand < 41) ifTrue: [ ^ self buildIncreaseBucketsIn: aGame ].	(rand < 51) ifTrue: [ ^ self buildExtendDistanceIn: aGame ].	^ self buildDecreaseBucketTimerIn: aGame! !ScuMovingItem subclass: #ScuPlayer	instanceVariableNames: 'bucketsLeft bucketPrototype movementTimerCounter movementQueue movementSpeed portalsLeft'	classVariableNames: ''	poolDictionaries: ''	category: 'Scu007-Items'!!ScuPlayer commentStamp: 'Matthias Springer 2/4/2012 22:52:56.023' prior: 0!A ScuPlayer is an item that the human user can control. It can place buckets that later spread water. Instance Variables	bucketsCount:		Number of buckets the player can place.			bucketPrototype:		Bucket which saves damage, direction and other values. It is copied when the player places a new bucket.	movementQueue:		Movement queue to save movement orders of the player. If the player is currently moving the order is saved and executed later. This queue enforces that the player can't run arbitrarily fast.	movementSpeed:		Determines, how long a movement action endures.	movementTimerCounter:		Counts the time elapsed since the last move.	portalsLeft:		The number of portals the player can place.!!ScuPlayer methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:20:03.96'!animationTime 	animationTime ifNil: [self animationTime: self movementSpeed - 50].	^ animationTime! !!ScuPlayer methodsFor: 'accessing' stamp: 'Matthias Springer 2/4/2012 22:45:46.023'!bucketsLeft	bucketsLeft ifNil: [self bucketsLeft: 1].	^ bucketsLeft! !!ScuPlayer methodsFor: 'accessing' stamp: 'Matthias Springer 2/4/2012 22:54:41.537'!bucketsLeft: anObject	bucketsLeft := anObject.	self send: #bucketsLeft to: nil with: anObject.! !!ScuPlayer methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:19:53.864'!direction	^ direction! !!ScuPlayer methodsFor: 'accessing' stamp: 'kf 1/5/2012 09:31:56.098'!health	health ifNil: [ health := 3 ].	^ health! !!ScuPlayer methodsFor: 'accessing' stamp: 'Matthias Springer 2/4/2012 22:41:09.774'!portalsLeft	portalsLeft ifNil: [self portalsLeft: 0].	^ portalsLeft! !!ScuPlayer methodsFor: 'accessing' stamp: 'Matthias Springer 2/4/2012 22:41:13.455'!portalsLeft: aNumber	portalsLeft := aNumber.! !!ScuPlayer methodsFor: 'action' stamp: 'Matthias Springer 2/4/2012 22:44:55.503'!bucketDeleted	self bucketsLeft: self bucketsLeft + 1.! !!ScuPlayer methodsFor: 'action' stamp: 'Matthias Springer 2/4/2012 22:45:04.303'!bucketPlaced	self bucketsLeft: self bucketsLeft - 1.! !!ScuPlayer methodsFor: 'action' stamp: 'Matthias Springer 2/5/2012 00:31:27.758'!bucketPrototype	bucketPrototype ifNil: [bucketPrototype := ScuBucket newIn: self game].	^ bucketPrototype! !!ScuPlayer methodsFor: 'action' stamp: 'Matthias Springer 1/31/2012 22:20:19.368'!movementSpeed	movementSpeed ifNil: [self movementSpeed: self game configuration playerMovementSpeed].  	^ movementSpeed! !!ScuPlayer methodsFor: 'action' stamp: 'Matthias Springer 1/6/2012 15:06:42.42'!movementSpeed: aValue	movementSpeed := aValue.! !!ScuPlayer methodsFor: 'action' stamp: 'Matthias Springer 2/5/2012 00:34:06.227'!placeBucket	| bucket |	self deceased ifFalse: [		self bucketsLeft > 0 ifTrue: [				bucket := self bucketPrototype copyBucket.				bucket placedIn: self game parentItem: self.				(self tileUnder checkIn: bucket withPermissions: bucket enterPermissions default: true) ifTrue: [self bucketPlaced].				^ true]].	^ false! !!ScuPlayer methodsFor: 'action' stamp: 'Matthias Springer 2/4/2012 22:40:09.525'!placePortal	| portal canPlace |	self direction ifNil: [^ false].  	portal := ScuPortal newFirstWithDirection: self direction. 	canPlace := (self portalsLeft > 0) 		and: (self tileUnder canIEnterWithPermissions: portal enterPermissions default: true) 		and: [(self tileUnder neighborAt: self direction) 				canIEnterWithPermissions: portal enterPermissions default: false].	canPlace ifTrue: [		self tileUnder checkIn: portal.  		self portalPlaced: portal].	^ canPlace! !!ScuPlayer methodsFor: 'action' stamp: 'Matthias Springer 2/4/2012 22:40:42.975'!portalPlaced: aPortal	aPortal draw.	self portalsLeft: self portalsLeft - 1.! !!ScuPlayer methodsFor: 'permits' stamp: 'Matthias Springer 1/31/2012 22:20:09.399'!enterPermissions	enterPermissions ifNil: [self enterPermissions: {#floor . #pickUpItem. #portal}].	^ enterPermissions! !!ScuPlayer methodsFor: 'permits' stamp: 'Matthias Springer 1/31/2012 22:20:13.902'!itemSymbol 	^ #player! !!ScuPlayer methodsFor: 'initialize-release' stamp: 'Matthias Springer 2/5/2012 12:55:06.781'!gameInitialize	super gameInitialize.	movementQueue := OrderedCollection new.	movementTimerCounter := 0.! !!ScuPlayer methodsFor: 'moving' stamp: 'Matthias Springer 2/4/2012 22:08:09.408'!moveTo: aDirectionSymbol	| movementClosure |	movementClosure := [super moveTo: aDirectionSymbol].	(movementTimerCounter = 0) ifTrue: [ 		movementClosure value. 		self movementTimerCounter: self movementSpeed / 50] 	ifFalse: [(self movementQueue size < 1) ifTrue: [		movementQueue add: movementClosure]].	self drawImage.! !!ScuPlayer methodsFor: 'moving' stamp: 'Matthias Springer 1/31/2012 22:19:51.393'!movementQueue	movementQueue ifNil: [self movementQueue: OrderedCollection new].	^ movementQueue! !!ScuPlayer methodsFor: 'moving' stamp: 'Matthias Springer 1/6/2012 14:29:41.208'!movementQueue: aQueue	movementQueue := OrderedCollection new.! !!ScuPlayer methodsFor: 'moving' stamp: 'Matthias Springer 1/31/2012 22:20:07.283'!movementTimerCounter	movementTimerCounter ifNil: [self movementTimerCounter: 0].	^ movementTimerCounter! !!ScuPlayer methodsFor: 'moving' stamp: 'Matthias Springer 1/6/2012 14:28:28.416'!movementTimerCounter: aValue	movementTimerCounter := aValue.! !!ScuPlayer methodsFor: 'stepping and presenter' stamp: 'Matthias Springer 1/6/2012 15:07:53.876'!step	self movementTimerCounter: (0 max: (self movementTimerCounter - 1)).	((self movementTimerCounter = 0) and: self movementQueue isEmpty not) ifTrue: [		self movementQueue first value. 		self movementQueue removeFirst. 		self movementTimerCounter: (self movementSpeed) / 50].  ! !!ScuPlayer methodsFor: 'stepping and presenter' stamp: 'Matthias Springer 1/31/2012 22:19:55.968'!stepTime 	^ 50! !!ScuPlayer methodsFor: 'render' stamp: 'Matthias Springer 1/31/2012 22:19:58.295'!variation	^ self direction! !!ScuPlayer methodsFor: 'render' stamp: 'Matthias Springer 1/31/2012 22:19:45.35'!zIndex	^ 100! !ScuItem subclass: #ScuPortal	instanceVariableNames: 'direction connectedPortal'	classVariableNames: ''	poolDictionaries: ''	category: 'Scu007-Items'!!ScuPortal commentStamp: 'Matthias Springer 2/9/2012 22:45:19.914' prior: 0!A ScuPortal is a portal which connects visualizes a connection between two tiles.Instance Variables	connectedPortal:		The other portal connected to this portal.	direction:		Direction of the portal.!!ScuPortal methodsFor: 'event handling' stamp: 'Matthias Springer 2/4/2012 22:03:15.189'!checkedIn: aTile	self connectedPortal ifNil: [		self connectedPortal: (self class newSecondWithDirection: self direction withFirst: self).		(self connectedPortal placeAsSecondPortalWithStartAt: self tileUnder) 			ifTrue: [self 				connectedPortal direction: self oppositeDirection;				draw;			 	connectPortal: self with: self connectedPortal]].! !!ScuPortal methodsFor: 'event handling' stamp: 'dominik 2/9/2012 16:01:36.993'!connectPortal: firstPortal with: secondPortal	| sourceTile targetTile |	sourceTile := firstPortal tileUnder.	targetTile := secondPortal tileUnder.	sourceTile neighbors at: firstPortal direction put: targetTile.	targetTile neighbors at: secondPortal direction put: sourceTile.! !!ScuPortal methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:20:41.289'!connectedPortal	^ connectedPortal! !!ScuPortal methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 21:56:05.817'!connectedPortal: anObject	connectedPortal := anObject.! !!ScuPortal methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:20:48.504'!direction	^ direction! !!ScuPortal methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 21:56:10.386'!direction: anObject	direction := anObject.! !!ScuPortal methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:20:43.504'!oppositeDirection	| directions |	directions := self game configuration directions.	^ directions at: (((directions indexOf: self direction) + (directions size / 2) - 1) \\ directions size) + 1! !!ScuPortal methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:20:56.683'!placeAsSecondPortalWithStartAt: startTile	| currentTile |	currentTile := startTile neighborAt: self direction.	[currentTile canIEnterWithPermissions: self enterPermissions default: false] 		whileTrue: [currentTile := currentTile neighborAt: self direction].	^currentTile checkIn: self withPermissions: self enterPermissions default: true! !!ScuPortal methodsFor: 'permits' stamp: 'Matthias Springer 1/31/2012 22:20:52.898'!enterPermissions	^ {#wall}! !!ScuPortal methodsFor: 'permits' stamp: 'Matthias Springer 1/31/2012 22:20:58.802'!itemSymbol 	^ #portal! !!ScuPortal methodsFor: 'render' stamp: 'Matthias Springer 1/31/2012 22:20:50.561'!variation	^ self direction! !!ScuPortal methodsFor: 'render' stamp: 'Matthias Springer 1/31/2012 22:20:46.449'!zIndex	^ 35! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ScuPortal class	instanceVariableNames: ''!!ScuPortal class methodsFor: 'instance creation' stamp: 'Matthias Springer 2/6/2012 17:54:07.576'!newFirstWithDirection: aDirectionSymbol	^ self basicNew		direction: aDirectionSymbol;		initialize;		yourself  ! !!ScuPortal class methodsFor: 'instance creation' stamp: 'Matthias Springer 2/6/2012 17:54:53.866'!newSecondWithDirection: aDirectionSymbol withFirst: aFirstPortal	^ self basicNew		direction: aDirectionSymbol;		initialize;		connectedPortal: aFirstPortal;		yourself    	! !ScuDestructibleItem subclass: #ScuSlime	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Scu007-Items'!!ScuSlime commentStamp: 'dominik 2/4/2012 16:03:14.617' prior: 0!A ScuSlime is spread by ScuMonster and is to be washed away by the ScuPlayer using the ScuBuckets.Instance Variables!!ScuSlime methodsFor: 'actions' stamp: 'Matthias Springer 2/5/2012 01:15:59.403'!deceaseBy: aDamageDealer	self game random next < self game configuration pickUpItemProbability		ifTrue: [(self tileUnder) checkIn: (ScuPickUpItem buildRandomIn: self game)].	super deceaseBy: aDamageDealer.! !!ScuSlime methodsFor: 'render' stamp: 'dominik 2/9/2012 17:01:15.223'!draw	super draw.	self game configuration animationEnabled ifTrue: [    		self doFadeInAnimation].! !!ScuSlime methodsFor: 'render' stamp: 'Matthias Springer 1/31/2012 22:20:30.104'!zIndex	^ 30! !!ScuSlime methodsFor: 'event handling' stamp: 'Matthias Springer 2/4/2012 21:59:38.006'!handleGameIsWon	^ self tileUnder isNil! !!ScuSlime methodsFor: 'event handling' stamp: 'Matthias Springer 2/10/2012 19:27'!notifyAbout: aMessage from: aSender to: aRecipient with: aPayload	(aMessage == #gameIsWon)		ifTrue: [ ^ self handleGameIsWon ].	^ super notifyAbout: aMessage from: aSender to: aRecipient with: aPayload! !!ScuSlime methodsFor: 'permits' stamp: 'Matthias Springer 1/31/2012 22:20:28.2'!itemSymbol 	^ #slime! !ScuItem subclass: #ScuWall	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Scu007-Items'!!ScuWall commentStamp: 'dominik 2/4/2012 16:04:39.223' prior: 0!A ScuWall is a ScuItem that adds wall behavior and appearance to a ScuTile.Instance Variables!!ScuWall methodsFor: 'permits' stamp: 'Matthias Springer 1/31/2012 22:21:01.907'!itemSymbol 	^ #wall! !!ScuWall methodsFor: 'render' stamp: 'Matthias Springer 1/31/2012 22:21:03.898'!zIndex	^ 10! !ScuItem subclass: #ScuWater	instanceVariableNames: 'direction bucket damage distance propagated'	classVariableNames: ''	poolDictionaries: ''	category: 'Scu007-Items'!!ScuWater commentStamp: 'Matthias Springer 2/9/2012 22:47:46.198' prior: 0!A ScuWater is water which causes damage to other items.Instance Variables	bucket:		The bucket which created this water item.	damage:		The amount of damage this water item can cause. This value decreases if the water item makes damage.	direction:		The direction which the water item spreads into.	distance:		The distance this water item will spread into. This value decreases if the water spreads.	propagated:		Determines whether this water item has already spread.!!ScuWater methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:21:17.251'!bucket	^ bucket! !!ScuWater methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 21:57:08.931'!bucket: anObject	bucket := anObject.! !!ScuWater methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:21:24.138'!damage	damage ifNil: [self damage: 1].	^ damage! !!ScuWater methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 21:58:20.013'!damage: anObject	damage := anObject.! !!ScuWater methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:21:05.976'!direction	^ direction! !!ScuWater methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 21:58:25.629'!direction: anObject	direction := anObject.! !!ScuWater methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:21:29.475'!distance	distance ifNil: [self distance: 1].	^ distance! !!ScuWater methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 21:58:34.398'!distance: anObject	distance := anObject.! !!ScuWater methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:21:12.898'!propagated	^ propagated! !!ScuWater methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:02:04.06'!propagated: aBoolean	propagated := aBoolean.! !!ScuWater methodsFor: 'actions' stamp: 'kf 2/4/2012 18:51:14.406'!checkOnto: aTile	| responses damageDealt |	(aTile checkIn: self withPermissions: {#wall} default: true) ifTrue: [		responses :=			(self send: #damage from: self bucket player to: self tileUnder with: self damage)			select: [:anItem | anItem isInteger].		responses add: 0. "Responses should not be empty (we use #sum)."		damageDealt := responses sum.		self damage: self damage - damageDealt].! !!ScuWater methodsFor: 'actions' stamp: 'Matthias Springer 1/31/2012 21:59:22.271'!propagate	self propagated: true.	self direction 		ifNil: [self game configuration directions do: [:aDir | self propagateInto: aDir]]		ifNotNil: [self propagateInto: self direction].! !!ScuWater methodsFor: 'actions' stamp: 'Matthias Springer 2/4/2012 22:03:25.845'!propagateInto: aDirection	| aField |	(aDirection notNil and: (self distance > 0) and: (self damage > 0)) ifTrue: [		aField := self tileUnder neighborAt: aDirection.		(self class 			newFrom: self bucket 			into: aDirection 			reaching: (self distance - 1) 			dealing: self damage)		 		checkOnto: aField].! !!ScuWater methodsFor: 'render' stamp: 'dominik 2/9/2012 17:01:04.667'!draw	super draw.	self game configuration animationEnabled ifTrue: [  		self doFadeInAnimationWithDuration: 60].! !!ScuWater methodsFor: 'render' stamp: 'Matthias Springer 1/31/2012 22:21:08.377'!zIndex	^ 40! !!ScuWater methodsFor: 'permits' stamp: 'Matthias Springer 1/31/2012 22:21:26.249'!itemSymbol	^ #water! !!ScuWater methodsFor: 'stepping and presenter' stamp: 'Matthias Springer 1/31/2012 22:02:19.3'!step	self propagated		ifNil: [self propagated: false]		ifNotNil: [self propagated ifFalse: [self propagate] ifTrue: [self delete]].! !!ScuWater methodsFor: 'stepping and presenter' stamp: 'dominik 2/4/2012 20:56:27.849'!stepTime	^ 200! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ScuWater class	instanceVariableNames: ''!!ScuWater class methodsFor: 'instance creation' stamp: 'Matthias Springer 2/6/2012 17:57:45.512'!newFrom: aBucket into: aDirection reaching: aDistance dealing: anAmount	^ (ScuWater newIn: aBucket game)		bucket: aBucket;		direction: aDirection;		distance: aDistance;		damage: anAmount;		yourself	! !!ScuWater class methodsFor: 'instance creation' stamp: 'Matthias Springer 2/6/2012 17:58:40.315'!newOn: aTile from: aBucket into: aDirection reaching: aDistance dealing: anAmount	^ (ScuWater newIn: aTile game)		bucket: aBucket;		direction: aDirection;		distance: aDistance;		damage: anAmount;		yourself      ! !