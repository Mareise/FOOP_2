Object subclass: #ScuPreferences	instanceVariableNames: 'keyMapping strings'	classVariableNames: ''	poolDictionaries: ''	category: 'Scu007-DataStructure'!!ScuPreferences commentStamp: 'Matthias Springer 2/10/2012 14:37:23.394' prior: 0!A ScuPreferences is a container for predefined data.Instance Variables	keyMapping:		Mapping from key character codes to game actions.	strings:		Strings to be displayed for the user.!!ScuPreferences methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:21:49.058'!actionOn: aKey	^ self keyMapping at: aKey ifAbsentPut: [true]! !!ScuPreferences methodsFor: 'accessing' stamp: 'Matthias Springer 2/9/2012 15:29:55.118'!keyMapping	keyMapping ifNil: [self keyMapping: Dictionary new].	^ keyMapping! !!ScuPreferences methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 14:00:03.281'!keyMapping: anObject	keyMapping := anObject.! !!ScuPreferences methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:21:56.371'!keysRequired	^ #(exit pause),		(self keysRequiredPlayer: #firstPlayer)! !!ScuPreferences methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:21:46.643'!keysRequiredPlayer: aPlayerName	^ #(Left Right Up Down Place) collect: [:aCode | (aPlayerName, aCode) asSymbol]! !!ScuPreferences methodsFor: 'accessing' stamp: 'Matthias Springer 2/10/2012 19:23'!strings	strings ifNil: [		self strings: (IdentityDictionary newFromPairs: {			#wonTitle. 'Yaaay, you made it'.			#wonText. 'You successfully managed to clean up the spaceship.', 				Character cr, ' Congratulations on achieving a score of {1} points.'.			#lostTitle. 'Game Over'.			#lostText. 'You did not manage to clean the spaceship.'.			#closeBtnText. 'Close game'.			#levelAgainBtnText. 'Let me play the level again'.			#anotherGameBtnText. 'Let me play another game'		})]. 	^ strings! !!ScuPreferences methodsFor: 'accessing' stamp: 'Matthias Springer 2/10/2012 16:00'!strings: anObject	strings := anObject.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ScuPreferences class	instanceVariableNames: ''!!ScuPreferences class methodsFor: 'instance creation' stamp: 'msw 2/5/2012 22:26:06.376'!default	| instance |	instance := ScuPreferences new.	instance keyMapping: (Dictionary newFromPairs: {			Character arrowRight. #firstPlayerRight.			Character arrowLeft. #firstPlayerLeft.			Character arrowUp. #firstPlayerUp.			Character arrowDown. #firstPlayerDown.			Character space. #firstPlayerPlaceBucket.			Character escape. #pause.			$q. #exit.			$l. #toggleLock.			$p. #firstPlayerPlacePortal}).	^ instance! !ScuPreferences subclass: #ScuConfiguration	instanceVariableNames: 'animationEnabled borderProbability builder cheatsEnabled difficultyLevel diagonalDirections gameSize pickUpItemProbability randomSlimeProbability toPlayerStrategyProbability numberOfMonsters tileSize'	classVariableNames: ''	poolDictionaries: ''	category: 'Scu007-DataStructure'!!ScuConfiguration commentStamp: 'Matthias Springer 2/10/2012 14:46:08.238' prior: 0!A ScuConfiguration contains configuration values for the current game.Instance Variables	animationEnabled:		Determines whether animations are enabled.	borderProbability:		Random level generation: probability of generating an outer border around the level.	builder:		Builder for this game.	diagonalDirections:		Contains symbols for all directions, including diagonal directions.	difficultyLevel:		A difficulty level from 1 to 10.	gameSize:		The size of the game.	numberOfMonsters:		The number of monsters.	pickUpItemProbability:		Probability for generating a pickup item after washing slime.	randomSlimeProbability:		Random level generation: probability for generating random slime.	tileSize:		Size of a tile in pixels.	toPlayerStrategyProbability:		 Probability for to-player-strategy monsters to move towards the player (randomness introduced to make the game more difficult).!!ScuConfiguration methodsFor: 'game' stamp: 'dominik 2/9/2012 17:18:54.635'!animationEnabled	animationEnabled ifNil: [self animationEnabled: true].	^ animationEnabled! !!ScuConfiguration methodsFor: 'game' stamp: 'Matthias Springer 2/10/2012 15:52'!animationEnabled: anObject	animationEnabled := anObject.! !!ScuConfiguration methodsFor: 'game' stamp: 'Matthias Springer 2/10/2012 18:44'!cheatsEnabled	cheatsEnabled ifNil: [self cheatsEnabled: false].	^ cheatsEnabled! !!ScuConfiguration methodsFor: 'game' stamp: 'Matthias Springer 2/10/2012 18:44'!cheatsEnabled: anObject	cheatsEnabled := anObject.! !!ScuConfiguration methodsFor: 'game' stamp: 'Matthias Springer 2/10/2012 15:52'!diagonalDirections	diagonalDirections ifNil: [self diagonalDirections: false].	^ diagonalDirections ! !!ScuConfiguration methodsFor: 'game' stamp: 'Matthias Springer 2/10/2012 15:52'!diagonalDirections: aBool	diagonalDirections := aBool.! !!ScuConfiguration methodsFor: 'game' stamp: 'Matthias Springer 2/10/2012 15:52'!difficultyLevel	difficultyLevel ifNil: [self difficultyLevel: 5].	^ difficultyLevel! !!ScuConfiguration methodsFor: 'game' stamp: 'dominik 2/5/2012 19:40:32.699'!difficultyLevel: aNumber	difficultyLevel := aNumber.	self numberOfMonsters: 2 + (aNumber * aNumber / 10) ceiling asInteger.	self randomSlimeProbability: aNumber / 10 * 0.6.	self borderProbability: 1.1 - (aNumber / 11).	self toPlayerStrategyProbability: 0.2 + (aNumber / 10). 	self pickUpItemProbability: 0.7 - (aNumber / 10).! !!ScuConfiguration methodsFor: 'game' stamp: 'Matthias Springer 2/10/2012 14:43:19.638'!directions	self diagonalDirections 		ifTrue: [^ {#north. #east. #south. #west. #northWest. #northEast. #southWest. #southEast}]		ifFalse: [^ {#north. #east. #south. #west}].! !!ScuConfiguration methodsFor: 'game' stamp: 'Matthias Springer 1/31/2012 22:17:18.881'!draw	^ true! !!ScuConfiguration methodsFor: 'game' stamp: 'Matthias Springer 2/5/2012 01:15:49.42'!pickUpItemProbability	pickUpItemProbability ifNil: [self pickUpItemProbability: 0.3].	^ pickUpItemProbability! !!ScuConfiguration methodsFor: 'game' stamp: 'Matthias Springer 2/5/2012 01:15:12.362'!pickUpItemProbability: aValue	pickUpItemProbability := aValue.! !!ScuConfiguration methodsFor: 'random level generation' stamp: 'Matthias Springer 2/5/2012 01:08:52.608'!borderProbability	borderProbability ifNil: [self borderProbability: 0.6].	^ borderProbability! !!ScuConfiguration methodsFor: 'random level generation' stamp: 'Matthias Springer 2/5/2012 01:08:13.476'!borderProbability: aValue	borderProbability := aValue.! !!ScuConfiguration methodsFor: 'random level generation' stamp: 'dominik 2/4/2012 21:04:13.906'!numberOfRandomPaths	^ 38! !!ScuConfiguration methodsFor: 'random level generation' stamp: 'Matthias Springer 1/31/2012 22:16:52.098'!pathLengthDivisor	^ 20! !!ScuConfiguration methodsFor: 'random level generation' stamp: 'Matthias Springer 2/5/2012 12:37:27.187'!randomSlimeProbability	randomSlimeProbability ifNil: [self randomSlimeProbability: 0.1].	^ randomSlimeProbability! !!ScuConfiguration methodsFor: 'random level generation' stamp: 'Matthias Springer 2/5/2012 01:04:32.67'!randomSlimeProbability: aValue	randomSlimeProbability := aValue.! !!ScuConfiguration methodsFor: 'level' stamp: 'Matthias Springer 2/10/2012 15:53'!builder	builder ifNil: [self builder: ScuRandomLevelBuilder].	^ builder! !!ScuConfiguration methodsFor: 'level' stamp: 'Matthias Springer 2/10/2012 15:53'!builder: aBuilderClass	builder := aBuilderClass.! !!ScuConfiguration methodsFor: 'level' stamp: 'dominik 2/4/2012 18:34:13.524'!monstersAtCakeAction	^ 5! !!ScuConfiguration methodsFor: 'grid' stamp: 'Matthias Springer 2/10/2012 19:24'!gameSize	"number of tiles in column@row"	gameSize ifNil: [self gameSize: 20@12].	^ gameSize! !!ScuConfiguration methodsFor: 'grid' stamp: 'Matthias Springer 2/10/2012 15:54'!gameSize: aPoint	gameSize := aPoint.! !!ScuConfiguration methodsFor: 'grid' stamp: 'Matthias Springer 2/10/2012 15:57'!tileSize	tileSize ifNil: [self tileSize: 48@48].	^ tileSize! !!ScuConfiguration methodsFor: 'grid' stamp: 'Matthias Springer 2/10/2012 15:57'!tileSize: aPoint	tileSize := aPoint.	! !!ScuConfiguration methodsFor: 'monsters' stamp: 'Matthias Springer 2/4/2012 23:23:09.761'!numberOfMonsters	numberOfMonsters ifNil: [self numberOfMonsters: 5].	^ numberOfMonsters! !!ScuConfiguration methodsFor: 'monsters' stamp: 'Matthias Springer 2/10/2012 15:54'!numberOfMonsters: anInteger	numberOfMonsters := anInteger.! !!ScuConfiguration methodsFor: 'monsters' stamp: 'Matthias Springer 2/5/2012 01:11:12.314'!toPlayerStrategyProbability	toPlayerStrategyProbability ifNil: [self toPlayerStrategyProbability: 0.5].	^ toPlayerStrategyProbability! !!ScuConfiguration methodsFor: 'monsters' stamp: 'Matthias Springer 2/5/2012 01:10:31.352'!toPlayerStrategyProbability: aValue	toPlayerStrategyProbability := aValue.! !!ScuConfiguration methodsFor: 'player' stamp: 'Matthias Springer 1/31/2012 22:17:06.026'!playerInitNumberOfPortals	^ 2! !!ScuConfiguration methodsFor: 'player' stamp: 'Matthias Springer 1/31/2012 22:16:17.649'!playerMovementSpeed	^ 200! !!ScuConfiguration methodsFor: 'player' stamp: 'Matthias Springer 1/31/2012 22:17:24.058'!playerStartLocation	^ 2@8! !