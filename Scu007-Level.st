Morph subclass: #ScuLevel	instanceVariableNames: 'tiles time lastStepAt game builder'	classVariableNames: ''	poolDictionaries: ''	category: 'Scu007-Level'!!ScuLevel commentStamp: 'Matthias Springer 2/4/2012 23:58:27.262' prior: 0!A ScuLevel is a game level built by a builder.Instance Variables	tiles:		Matrix of tiles. The matrix structure is only needed while building the game. Later, navigation is done via "tile neighbor at:".!!ScuLevel methodsFor: 'accessing' stamp: 'msw 2/9/2012 20:23:35.634'!builder	^ builder! !!ScuLevel methodsFor: 'accessing' stamp: 'msw 2/9/2012 20:23:35.643'!builder: anObject	builder := anObject! !!ScuLevel methodsFor: 'accessing' stamp: 'msw 2/9/2012 19:24:17.377'!game	^ game! !!ScuLevel methodsFor: 'accessing' stamp: 'msw 2/9/2012 19:24:17.389'!game: anObject	game := anObject! !!ScuLevel methodsFor: 'accessing' stamp: 'msw 2/9/2012 19:20:01.684'!lastStepAt	^ lastStepAt! !!ScuLevel methodsFor: 'accessing' stamp: 'msw 2/9/2012 19:19:55.682'!lastStepAt: anObject	lastStepAt := anObject! !!ScuLevel methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:26:41.292'!tiles	^ tiles! !!ScuLevel methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 13:34:47.152'!tiles: anObject	tiles := anObject.! !!ScuLevel methodsFor: 'accessing' stamp: 'msw 2/9/2012 19:24:28.034'!time	time ifNil: [self time: 0 ].	^ time! !!ScuLevel methodsFor: 'accessing' stamp: 'msw 2/9/2012 19:16:50.885'!time: anObject	time := anObject! !!ScuLevel methodsFor: 'stepping and presenter' stamp: 'msw 2/9/2012 19:19:14.297'!stepAt: millisecondClockValue	| timeElapsed |	timeElapsed := millisecondClockValue - (self lastStepAt ifNil: [millisecondClockValue]).	self lastStepAt: millisecondClockValue.		self game state countTime		ifTrue: [self time: (self time + timeElapsed)].		^ super stepAt: millisecondClockValue! !!ScuLevel methodsFor: 'stepping and presenter' stamp: 'Matthias Springer 2/9/2012 22:35:45.438'!stepTime 	^ 50! !!ScuLevel methodsFor: 'stepping and presenter' stamp: 'msw 2/9/2012 19:15:56.378'!wantsSteps	^ true! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ScuLevel class	instanceVariableNames: ''!!ScuLevel class methodsFor: 'instance creation' stamp: 'msw 2/9/2012 19:20:56.108'!newIn: aGame	| instance |	instance := self basicNew.	instance game: aGame.	instance initialize.	^ instance! !Object subclass: #ScuLevelBuilder	instanceVariableNames: 'level game tiles'	classVariableNames: ''	poolDictionaries: ''	category: 'Scu007-Level'!!ScuLevelBuilder commentStamp: 'Matthias Springer 2/9/2012 22:49:32.193' prior: 0!A ScuLevelBuilder is a builder that builds a level for this game.Instance Variables	game:		A reference to the game.	level:		The level to be built.	tiles:		A matrix of tiles which is gradually built and then put into the level data structure.!!ScuLevelBuilder methodsFor: 'builder' stamp: 'Matthias Springer 2/10/2012 19:25'!buildFloorAroundTile: aTile	"Builds at least 3 free (floor) items/fields around a given tile randomly, e.g. for the player to have enough space."	| neighbors |	neighbors := (aTile neighbors values select: [:x | x~= nil]) shuffled.	{ neighbors first. neighbors second. neighbors third. } do: [:neighbor | 		self removeWallFloorSlimeFromTile: neighbor.		neighbor checkIn: (ScuFloor newIn: self game)].! !!ScuLevelBuilder methodsFor: 'builder' stamp: 'Matthias Springer 1/31/2012 13:35:44.715'!buildItems	self subclassResponsibility.! !!ScuLevelBuilder methodsFor: 'builder' stamp: 'msw 2/9/2012 20:23:48.567'!buildLevel	self level: (ScuLevel newIn: self game).	self level builder: self.	self level color: Color transparent.! !!ScuLevelBuilder methodsFor: 'builder' stamp: 'msw 2/9/2012 20:04:07.056'!buildMonster	| monster strategy |	monster := ScuMonster newIn: self game.	self game random next < self game configuration toPlayerStrategyProbability		ifTrue: [strategy := ScuMonsterToPlayerStrategy]		ifFalse: [strategy := ScuMonsterRandomStrategy].	monster strategy: (strategy newIn: game for: monster).	^ monster! !!ScuLevelBuilder methodsFor: 'builder' stamp: 'msw 2/9/2012 20:05:56.131'!buildMonsters	self game monsters: OrderedCollection new.	self game configuration numberOfMonsters timesRepeat: [		self game monsters add: self buildMonster].! !!ScuLevelBuilder methodsFor: 'builder' stamp: 'Matthias Springer 1/31/2012 22:26:52.453'!buildPlayer	^ ScuPlayer newIn: self game! !!ScuLevelBuilder methodsFor: 'builder' stamp: 'Matthias Springer 1/31/2012 13:38:39.143'!buildPlayers	self subclassResponsibility.! !!ScuLevelBuilder methodsFor: 'builder' stamp: 'Matthias Springer 1/31/2012 22:26:54.701'!buildSingleTile	| tile |	tile := ScuTile newWithGame: self game.	self level addMorph: tile.	^ tile! !!ScuLevelBuilder methodsFor: 'builder' stamp: 'msw 2/10/2012 12:54:20.471'!buildTiles	| gridSize |	gridSize := self game configuration gameSize.	self tiles: (Matrix rows: gridSize y columns: gridSize x tabulate: [ :y :x | 		self buildSingleTile ]).	self level tiles: tiles.! !!ScuLevelBuilder methodsFor: 'builder' stamp: 'Matthias Springer 2/10/2012 19:25'!drawItems	self tiles withIndicesDo: [:tile :y :x |		tile items do: [:item |			item draw ]].! !!ScuLevelBuilder methodsFor: 'builder' stamp: 'Matthias Springer 1/31/2012 13:40:09.604'!drawSingleTile: aTile at: aPoint	|position extent|	extent := self game configuration tileSize.	position := ((aPoint x - 1) * extent x) @ ((aPoint y - 1) * extent y).	aTile drawAt: position withExtent: extent.! !!ScuLevelBuilder methodsFor: 'builder' stamp: 'Matthias Springer 2/10/2012 19:25'!drawTiles	self tiles withIndicesDo: [:tile :y :x |		self drawSingleTile: tile at: x@y].	self level extent: self game configuration tileSize * self game configuration gameSize.  ! !!ScuLevelBuilder methodsFor: 'builder' stamp: 'Matthias Springer 2/4/2012 20:59:25.297'!getUnoccupiedTilesFor: anItem	^ self tiles asSet select: [:aTile | 		aTile canIEnterWithPermissions: (anItem enterPermissions) default: false]! !!ScuLevelBuilder methodsFor: 'builder' stamp: 'Matthias Springer 1/31/2012 13:40:31.124'!linkTilePair: aTile and: otherTile forwards: aDirection backwards: otherDirection	aTile neighbors at: aDirection put: otherTile.	otherTile neighbors at: otherDirection put: aTile.! !!ScuLevelBuilder methodsFor: 'builder' stamp: 'Matthias Springer 2/4/2012 19:48:46.881'!linkTiles	| prevX nextX nextY |	self tiles withIndicesDo: [:tile :y :x |		prevX := ((x - 2) \\ self game configuration gameSize x) + 1.		nextX := (x \\ self game configuration gameSize x) + 1.		nextY := (y \\ self game configuration gameSize y) + 1.		self linkTilePair: tile and: (self tiles at: y at: nextX) 			forwards: #east backwards: #west.		self linkTilePair: tile and: (self tiles at: nextY at: x) 			forwards: #south backwards: #north.		self game configuration diagonalDirections ifTrue: [			self linkTilePair: tile and: (tiles at: nextY at: nextX)				forwards: #southEast backwards: #northWest.			self linkTilePair: tile and: (tiles at: nextY at: prevX)				forwards: #southWest backwards: #northEast]].! !!ScuLevelBuilder methodsFor: 'builder' stamp: 'Matthias Springer 2/9/2012 22:35:47.983'!positionMonsters	^ self positionMonsters: self game monsters! !!ScuLevelBuilder methodsFor: 'builder' stamp: 'Matthias Springer 2/10/2012 19:26'!positionMonsters: aMonsterList	| unoccupiedTiles aRandomTile |	unoccupiedTiles := self getUnoccupiedTilesFor: aMonsterList first.  	aMonsterList do: [:aMonster | 		unoccupiedTiles ifNotEmpty: [  			aRandomTile := self positionSingleMonster: aMonster atRandom: unoccupiedTiles.			unoccupiedTiles remove: aRandomTile]].! !!ScuLevelBuilder methodsFor: 'builder' stamp: 'Matthias Springer 2/10/2012 19:26'!positionSingleMonster: aMonster atRandom: unoccupiedTiles	^ unoccupiedTiles atRandom checkIn: aMonster! !!ScuLevelBuilder methodsFor: 'builder' stamp: 'Matthias Springer 1/31/2012 13:42:47.144'!removeWallFloorSlimeFromTile: aTile	(aTile items select: [ :item | 		#(wall floor slime) includes: item itemSymbol ]) do: [:each | 			aTile checkOut: each].! !!ScuLevelBuilder methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:26:46.149'!game	^ game! !!ScuLevelBuilder methodsFor: 'accessing' stamp: 'Matthias Springer 12/22/2011 10:23:51.646'!game: aGame	game := aGame.! !!ScuLevelBuilder methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:26:58.854'!level	^ level! !!ScuLevelBuilder methodsFor: 'accessing' stamp: 'msw 1/20/2012 02:37:35.02'!level: aLevel	level := aLevel.! !!ScuLevelBuilder methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:26:50.46'!tiles	^ tiles! !!ScuLevelBuilder methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 13:43:10.273'!tiles: anObject	tiles := anObject.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ScuLevelBuilder class	instanceVariableNames: ''!!ScuLevelBuilder class methodsFor: 'instance creation' stamp: 'Matthias Springer 2/6/2012 18:06:59.417'!newIn: aGame	^ self new		game: aGame;		yourself! !ScuLevelBuilder subclass: #ScuGridPatternLevelBuilder	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Scu007-Level'!!ScuGridPatternLevelBuilder commentStamp: 'Matthias Springer 2/9/2012 22:50:03.155' prior: 0!A ScuGridPatternLevelBuilder builds a regular grid level with an arbitrary size.Instance Variables!!ScuGridPatternLevelBuilder methodsFor: 'builder' stamp: 'Matthias Springer 1/31/2012 13:43:48.091'!buildItems	self tiles withIndicesDo: [:tile :y :x | (x even and: y even) 		ifTrue: [tile checkIn: (ScuWall newIn: self game)]		ifFalse: [tile 			checkIn: (ScuFloor newIn: self game); 			checkIn: (ScuSlime newIn: self game)]].! !!ScuGridPatternLevelBuilder methodsFor: 'builder' stamp: 'Matthias Springer 2/4/2012 22:40:30.975'!buildPlayer	| player |	player := super buildPlayer.	player portalsLeft: self game configuration playerInitNumberOfPortals. 	^ player! !!ScuGridPatternLevelBuilder methodsFor: 'builder' stamp: 'Matthias Springer 1/31/2012 13:44:00.355'!buildPlayers	self game mainPlayer: self buildPlayer.	self placeMovingItem: self game mainPlayer.! !!ScuGridPatternLevelBuilder methodsFor: 'builder' stamp: 'Matthias Springer 2/3/2012 17:08:05.804'!placeMovingItem: aMovingItem	| x y aRandomTile |	x := self game random nextInt: self game configuration gameSize x.	y := self game random nextInt: self game configuration gameSize y.	x even ifTrue: [x := (x + 1) \\ self game configuration gameSize x].	y even ifTrue: [y := (y + 1) \\ self game configuration gameSize y].	aRandomTile := self level tiles at: y at: x.	aRandomTile checkOutType: #slime.  	self buildFloorAroundTile: aRandomTile.	^ aRandomTile checkIn: aMovingItem! !!ScuGridPatternLevelBuilder methodsFor: 'builder' stamp: 'Matthias Springer 1/31/2012 13:44:19.323'!positionMonsters	self game monsters do: [:aMonster | self placeMovingItem: aMonster].! !Object subclass: #ScuLevelDirector	instanceVariableNames: 'builder'	classVariableNames: ''	poolDictionaries: ''	category: 'Scu007-Level'!!ScuLevelDirector commentStamp: 'Matthias Springer 2/9/2012 22:53:25.104' prior: 0!A ScuLevelDirector contains a description of the single steps involved in building a level.Instance Variables	builder:		A reference a builder.!!ScuLevelDirector methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:27:19.829'!builder	^ builder! !!ScuLevelDirector methodsFor: 'accessing' stamp: 'Matthias Springer 12/22/2011 10:12:02.698'!builder: aBuilder	builder := aBuilder.! !!ScuLevelDirector methodsFor: 'actions' stamp: 'msw 2/9/2012 20:34:25.077'!construct	builder		buildLevel;		buildTiles;		linkTiles;		buildItems;		buildPlayers;		buildMonsters;		positionMonsters.	builder game configuration draw ifTrue: [		builder 			drawTiles;			drawItems].	^ builder level! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ScuLevelDirector class	instanceVariableNames: ''!!ScuLevelDirector class methodsFor: 'instance creation' stamp: 'Matthias Springer 2/9/2012 13:26:02.47'!newWithBuilder: aBuilder game: aGame	^ ScuLevelDirector basicNew		builder: (aBuilder newIn: aGame)		yourself! !ScuLevelBuilder subclass: #ScuRandomLevelBuilder	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Scu007-Level'!!ScuRandomLevelBuilder commentStamp: 'Matthias Springer 2/9/2012 22:52:20.846' prior: 0!A ScuRandomLevelBuilder builds a random level.Instance Variables!!ScuRandomLevelBuilder methodsFor: 'builder' stamp: 'Matthias Springer 2/4/2012 19:28:37.939'!buildItems 	"First fill the map with walls, then create floor randomly, then remove big aggregations of floor tiles (rooms)."	self createWalls.	1 to: (self game configuration numberOfRandomPaths) do: [:x | self createFloors].	self createBorderWalls.	self createMoreWalls.! !!ScuRandomLevelBuilder methodsFor: 'builder' stamp: 'Matthias Springer 2/4/2012 22:40:46.559'!buildPlayer	| player |	player := super buildPlayer.	player portalsLeft: self game configuration playerInitNumberOfPortals. 	^ player! !!ScuRandomLevelBuilder methodsFor: 'builder' stamp: 'Matthias Springer 1/31/2012 22:27:14.51'!buildPlayers	| unoccupiedTiles aRandomTile |	self game mainPlayer: self buildPlayer.	unoccupiedTiles := self tiles asSet select: [:aTile | 		aTile canIEnterWithPermissions: (self game mainPlayer enterPermissions) default: false].	aRandomTile := unoccupiedTiles atRandom.	self buildFloorAroundTile: aRandomTile.	^ aRandomTile checkIn: self game mainPlayer! !!ScuRandomLevelBuilder methodsFor: 'builder' stamp: 'Matthias Springer 2/4/2012 20:14:26.994'!createBorderWalls	| borderTiles |	borderTiles := Set new.	{1. self game configuration gameSize x} do: [:x | borderTiles addAll: (tiles atColumn: x)].	{1. self game configuration gameSize y} do: [:y | borderTiles addAll: (tiles atRow: y)].	borderTiles do: [:tile | 		(self game random next < self game configuration borderProbability) ifTrue: [			self removeWallFloorSlimeFromTile: tile.			tile checkIn: (ScuWall newIn: self game)]].! !!ScuRandomLevelBuilder methodsFor: 'builder' stamp: 'Matthias Springer 2/5/2012 22:20:52.517'!createFloors	|tile|	tile := tiles atRandom.	(self tiles size / self game configuration pathLengthDivisor) ceiling timesRepeat: [		self removeWallFloorSlimeFromTile: tile.		tile checkIn: (ScuFloor newIn: self game).		(self game random next < (self game configuration randomSlimeProbability)) ifTrue: 			[tile checkIn: (ScuSlime newIn: self game)].		tile := tile neighbors atRandom].! !!ScuRandomLevelBuilder methodsFor: 'builder' stamp: 'Matthias Springer 2/3/2012 17:42:48.922'!createMoreWalls	"Creates additional walls if there is a large free (floor) area."	self tiles do: [:tile |		(tile surroundedAccessibleFields allSatisfy: 	[:neighbor | neighbor searchFor: #floor]) ifTrue: [			self removeWallFloorSlimeFromTile: tile.			tile checkIn: (ScuWall newIn: self game)]].! !!ScuRandomLevelBuilder methodsFor: 'builder' stamp: 'Matthias Springer 2/10/2012 19:27'!createWalls	| gameSize tile |	gameSize := self game configuration gameSize.	1 to: (gameSize x) do: [:x | 1 to: (gameSize y) do: [:y | 		tile := self tiles at: y at: x.		tile checkIn: (ScuWall newIn: self game)]].! !Morph subclass: #ScuTile	instanceVariableNames: 'neighbors game items'	classVariableNames: ''	poolDictionaries: ''	category: 'Scu007-Level'!!ScuTile commentStamp: 'Matthias Springer 2/10/2012 14:34:39.246' prior: 0!A ScuTile is linked with other tiles. ScuItems decorate a tile and give it appearance and behavior. It's part of a grid but its location on the screen is not important for its behavior. Instance Variables	game:		Reference to the game.	items:		Items on this tile.	neighbors:		All neighbor tiles directly reachable from this tile.!!ScuTile methodsFor: 'permits' stamp: 'Matthias Springer 1/31/2012 22:28:04.639'!canIEnterWithPermissions: permissions default: default	"example: canIEnterWithPermissions: {#floor. #bucket} default: false	if permissions do not include the symbol, we use the default	for items if permissions use not default "	^ self items allSatisfy: [ :anItem |		(permissions includes: anItem itemSymbol) xor: default]! !!ScuTile methodsFor: 'events' stamp: 'dominik 1/21/2012 11:17:49.662'!checkIn: anItem	self checkIn: anItem withPositionChange: true.! !!ScuTile methodsFor: 'events' stamp: 'Matthias Springer 1/31/2012 13:55:50.994'!checkIn: anItem withPermissions: permissions default: default	(self canIEnterWithPermissions: permissions default: default) 		ifFalse: [^ false] 		ifTrue: [			self checkIn: anItem.			^ true ].! !!ScuTile methodsFor: 'events' stamp: 'Matthias Springer 1/31/2012 13:56:02.497'!checkIn: anItem withPositionChange: aBool	aBool ifTrue: [		anItem extent: self extent;		position: self position].	self checkInWithoutPositionChange: anItem.   ! !!ScuTile methodsFor: 'events' stamp: 'Matthias Springer 1/31/2012 13:56:20.867'!checkInWithoutPositionChange: anItem	| itemBefore |	itemBefore := anItem.	self submorphs do: [ :subMorph | itemBefore zIndex < subMorph zIndex		 ifTrue: [itemBefore := subMorph]].	anItem = itemBefore 		ifTrue: [self addMorph: anItem]		ifFalse: [self addMorph: anItem behind: itemBefore].	self items add: anItem.	anItem checkedIn: self.! !!ScuTile methodsFor: 'events' stamp: 'Matthias Springer 2/9/2012 15:13:45.92'!checkOut: anItem	anItem checkedOut: self.	self removeMorph: anItem. 	self items remove: anItem. ! !!ScuTile methodsFor: 'events' stamp: 'dominik 1/19/2012 09:26:08.384'!checkOutType: aSymbol	self items do: [:subitems | subitems itemSymbol = aSymbol 		ifTrue: [self checkOut: subitems]].! !!ScuTile methodsFor: 'events' stamp: 'Matthias Springer 1/31/2012 22:27:58.296'!game	^ game! !!ScuTile methodsFor: 'events' stamp: 'Matthias Springer 1/7/2012 15:30:19.432'!game: aGame	game := aGame.! !!ScuTile methodsFor: 'events' stamp: 'Matthias Springer 1/31/2012 22:28:06.943'!searchFor: aSymbol	  ^ self items anySatisfy: [:subitem | subitem itemSymbol = aSymbol]! !!ScuTile methodsFor: 'events' stamp: 'Matthias Springer 1/31/2012 13:57:59.558'!searchFor: aSymbol do: aBlock	self items do: [:subitem | 		subitem itemSymbol = aSymbol ifTrue: [aBlock value: subitem]].! !!ScuTile methodsFor: 'render' stamp: 'dominik 12/22/2011 16:07:02.608'!drawAt: position withExtent: extent	self 		position: position;		extent: extent.	self color: Color transparent;		borderColor: Color black;		borderWidth: 1.! !!ScuTile methodsFor: 'initialize-release' stamp: 'Matthias Springer 1/31/2012 13:56:58.139'!initializeNeighborConnections	"initializes the array for the connection to other tiles that one can acces from this one"	self game configuration directions do: [:direction | self neighbors at: direction put: nil].! !!ScuTile methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:27:55.903'!items	items ifNil: [self items: OrderedCollection new]. 	^ items! !!ScuTile methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 13:57:14.933'!items: anObject	items := anObject.! !!ScuTile methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:28:00.238'!neighborAt: aDirectionSymbol	^ self neighbors at: aDirectionSymbol! !!ScuTile methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:28:16.311'!neighbors	neighbors ifNil: [self neighbors: Dictionary new].	^ neighbors! !!ScuTile methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 13:57:40.517'!neighbors: anObject	neighbors := anObject.! !!ScuTile methodsFor: 'accessing' stamp: 'Matthias Springer 2/10/2012 15:18'!surroundedAccessibleFields	| allNeighbors |	allNeighbors := Set newFrom: self neighbors values.	"workaround: Set>>flatten was removed in Squeak 4.3"	({#north. #south} collect: [:direction | 		{#west. #east} collect: [:direction2 | 			(self neighborAt: direction) neighborAt: direction2]]) 		do: [:tiles | allNeighbors addAll: tiles].	^ allNeighbors select: [:x | x notNil]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ScuTile class	instanceVariableNames: ''!!ScuTile class methodsFor: 'construct' stamp: 'Matthias Springer 2/6/2012 18:08:52.221'!newWithGame: aGame	^ ScuTile basicNew		game: aGame;		initialize;		initializeNeighborConnections;		yourself! !