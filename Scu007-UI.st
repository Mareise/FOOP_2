Object subclass: #ScuPluggableButtonObject	instanceVariableNames: 'actionBlock stateBlock'	classVariableNames: ''	poolDictionaries: ''	category: 'Scu007-UI'!!ScuPluggableButtonObject commentStamp: 'msw 2/10/2012 11:48:49.468' prior: 0!A ScuPluggableButtonObject is a simple model for a PluggableButtonMorph.The uses to blocks to determine wheater the button is selected (stateBlock) and another block which is executed when the button is clicked.!!ScuPluggableButtonObject methodsFor: 'values' stamp: 'msw 2/4/2012 21:40:01.018'!action	^ self actionBlock value! !!ScuPluggableButtonObject methodsFor: 'values' stamp: 'msw 2/4/2012 21:39:54.296'!state	^ self stateBlock value! !!ScuPluggableButtonObject methodsFor: 'accessing' stamp: 'msw 2/4/2012 20:59:17.298'!actionBlock	^ actionBlock! !!ScuPluggableButtonObject methodsFor: 'accessing' stamp: 'msw 2/4/2012 20:59:17.31'!actionBlock: anObject	actionBlock := anObject! !!ScuPluggableButtonObject methodsFor: 'accessing' stamp: 'msw 2/4/2012 20:59:17.32'!stateBlock	^ stateBlock! !!ScuPluggableButtonObject methodsFor: 'accessing' stamp: 'msw 2/4/2012 20:59:17.332'!stateBlock: anObject	stateBlock := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ScuPluggableButtonObject class	instanceVariableNames: ''!!ScuPluggableButtonObject class methodsFor: 'instance creation' stamp: 'Matthias Springer 2/6/2012 17:59:42.842'!newNew: stateBlock and: actionBlock	^ self basicNew 		actionBlock: actionBlock;		stateBlock: stateBlock;		yourself! !Morph subclass: #ScuWindowsAsset	instanceVariableNames: 'game'	classVariableNames: ''	poolDictionaries: ''	category: 'Scu007-UI'!!ScuWindowsAsset commentStamp: 'Matthias Springer 2/10/2012 14:55:28.196' prior: 0!A ScuWindowsAsset is an abstract base class for game windows containing shared behavior.Instance Variables	game:		Reference to the game.!!ScuWindowsAsset methodsFor: 'submorphs-add/remove' stamp: 'Matthias Springer 1/31/2012 22:09:16.787'!buildSubMorphs 	self subclassResponsibility.! !!ScuWindowsAsset methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:22:46.14'!game	^ game! !!ScuWindowsAsset methodsFor: 'accessing' stamp: 'Matthias Springer 1/31/2012 22:09:22.275'!game: anObject	game := anObject.! !!ScuWindowsAsset methodsFor: 'initialize-release' stamp: 'Matthias Springer 2/5/2012 22:32:52.318'!initialize	super initialize.	self color: (TranslucentColor darkGray alpha: 0.9).	self buildSubMorphs.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ScuWindowsAsset class	instanceVariableNames: ''!!ScuWindowsAsset class methodsFor: 'instance creation' stamp: 'Matthias Springer 2/6/2012 18:00:13.868'!newIn: aGame	^ super basicNew		game: aGame;		initialize;		yourself! !ScuWindowsAsset subclass: #ScuCheatWindow	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Scu007-UI'!!ScuCheatWindow commentStamp: 'Matthias Springer 2/10/2012 19:28' prior: 0!A ScuCheatWindow is a window providing cheats for the user.Instance Variables!!ScuCheatWindow methodsFor: 'submorphs-add/remove' stamp: 'kf 2/10/2012 17:29:45.495'!buildOptionMorph: anOption	^ self buildRowMorph		addMorph: (self buildStringMorph: anOption in: 16);		yourself! !!ScuCheatWindow methodsFor: 'submorphs-add/remove' stamp: 'kf 2/10/2012 17:29:45.502'!buildRowMorph	^ Morph new		color: Color transparent;		layoutPolicy: TableLayout new;		listDirection: #leftToRight;		hResizing: #spaceFill;		vResizing: #shrinkWrap;		cellInset: 10;		yourself! !!ScuCheatWindow methodsFor: 'submorphs-add/remove' stamp: 'kf 2/10/2012 17:29:45.509'!buildStringMorph: aContent in: aSize	^ (StringMorph contents: aContent font: (self defaultFontIn: aSize))		color: Color white;		yourself! !!ScuCheatWindow methodsFor: 'submorphs-add/remove' stamp: 'Matthias Springer 2/10/2012 19:24'!buildSubMorphs	self 		layoutPolicy: TableLayout new;		listDirection: #topToBottom;		wrapCentering: #center;		hResizing: #shrinkWrap;		vResizing: #shrinkWrap;		layoutInset: 20; 		cellInset: 10.	self 		drawHeadline;		drawHealthControls;		drawPortalControls;		drawCountControls;		drawDamageControls;		drawDistanceControls;		drawMonsterControls;		drawControls.! !!ScuCheatWindow methodsFor: 'submorphs-add/remove' stamp: 'kf 2/10/2012 17:49:29.966'!createButtonNamed: aString onStateChange: aClosure onAction: anotherClosure	| m1 button |	m1 := ScuPluggableButtonObject 		newNew: [(aClosure value == false) not]		and: anotherClosure.	button := PluggableButtonMorph on: m1 getState: #state action: #action.	button onColor: Color green offColor: Color red.	button label: aString font: (self defaultFontIn: 16).	^ button! !!ScuCheatWindow methodsFor: 'submorphs-add/remove' stamp: 'kf 2/10/2012 17:29:45.52'!defaultFontIn: aSize 	^ StrikeFont familyName: 'Arial' size: aSize! !!ScuCheatWindow methodsFor: 'submorphs-add/remove' stamp: 'kf 2/10/2012 17:50:04.853'!drawControls	| morph |	morph := self buildRowMorph.	morph addMorphBack: (self createButtonNamed: 'close' onStateChange: [false] onAction: [self delete]).	self addMorphBack: morph.! !!ScuCheatWindow methodsFor: 'submorphs-add/remove' stamp: 'Matthias Springer 2/10/2012 19:06'!drawCountControls	| morph |	morph := self buildOptionMorph: 'Bucket count'.	morph addMorphBack: (self createButtonNamed: '+1' onStateChange: true onAction: [		[:p | p bucketsLeft: (p bucketsLeft + 1)] value: self game mainPlayer]).	morph addMorphBack: (self createButtonNamed: '+10' onStateChange: true onAction: [		[:p | p bucketsLeft: (p bucketsLeft + 10)] value: self game mainPlayer]).	morph addMorphBack: (self createButtonNamed: '-1' onStateChange: false onAction: [		[:p | p bucketsLeft: (p bucketsLeft - 1)] value: self game mainPlayer]).	morph addMorphBack: (self createButtonNamed: '-10' onStateChange: false onAction: [		[:p | p bucketsLeft: (p bucketsLeft - 10)] value: self game mainPlayer]).	self addMorphBack: morph.! !!ScuCheatWindow methodsFor: 'submorphs-add/remove' stamp: 'Matthias Springer 2/10/2012 19:06'!drawDamageControls	| morph |	morph := self buildOptionMorph: 'Bucket damage'.	morph addMorphBack: (self createButtonNamed: '+1' onStateChange: true onAction: [		[:b | b damage: (b damage + 1)] value: self game mainPlayer bucketPrototype]).	morph addMorphBack: (self createButtonNamed: '+10' onStateChange: true onAction: [		[:b | b damage: (b damage + 10)] value: self game mainPlayer bucketPrototype]).	morph addMorphBack: (self createButtonNamed: '-1' onStateChange: false onAction: [		[:b | b damage: (b damage - 1)] value: self game mainPlayer bucketPrototype]).	morph addMorphBack: (self createButtonNamed: '-10' onStateChange: false onAction: [		[:b | b damage: (b damage - 10)] value: self game mainPlayer bucketPrototype]).	self addMorphBack: morph.! !!ScuCheatWindow methodsFor: 'submorphs-add/remove' stamp: 'Matthias Springer 2/10/2012 19:07'!drawDistanceControls	| morph |	morph := self buildOptionMorph: 'Bucket distance'.	morph addMorphBack: (self createButtonNamed: '+1' onStateChange: true onAction: [		[:b | b distance: (b distance + 1)] value: self game mainPlayer bucketPrototype]).	morph addMorphBack: (self createButtonNamed: '+10' onStateChange: true onAction: [		[:b | b distance: (b distance + 10)] value: self game mainPlayer bucketPrototype]).	morph addMorphBack: (self createButtonNamed: '-1' onStateChange: false onAction: [		[:b | b distance: (b distance - 1)] value: self game mainPlayer bucketPrototype]).	morph addMorphBack: (self createButtonNamed: '-10' onStateChange: false onAction: [		[:b | b distance: (b distance - 10)] value: self game mainPlayer bucketPrototype]).	self addMorphBack: morph.! !!ScuCheatWindow methodsFor: 'submorphs-add/remove' stamp: 'kf 2/10/2012 17:31:18.541'!drawHeadline	self addMorphBack: (self buildStringMorph: 'Cheetah!!' in: 48).! !!ScuCheatWindow methodsFor: 'submorphs-add/remove' stamp: 'kf 2/10/2012 18:18:37.896'!drawHealthControls	| morph |	morph := self buildOptionMorph: 'Player health'.	morph addMorphBack: (self createButtonNamed: '+1' onStateChange: [true] onAction: [		self game mainPlayer takeDamage: -1 from: self game mainPlayer]).	morph addMorphBack: (self createButtonNamed: '+10' onStateChange: [true] onAction: [		self game mainPlayer takeDamage: -10 from: self game mainPlayer]).	morph addMorphBack: (self createButtonNamed: '-1' onStateChange: [false] onAction: [		self game mainPlayer takeDamage: 1 from: self game mainPlayer]).	morph addMorphBack: (self createButtonNamed: '-10' onStateChange: [false] onAction: [		self game mainPlayer takeDamage: 10 from: self game mainPlayer]).	self addMorphBack: morph.! !!ScuCheatWindow methodsFor: 'submorphs-add/remove' stamp: 'Matthias Springer 2/10/2012 19:07'!drawMonsterControls	| morph |	morph := self buildOptionMorph: 'Mo-mo-mo-mo-monster'.	morph addMorphBack: (self createButtonNamed: '+1' onStateChange: true onAction: [		[:b | b positionMonsters: {b buildMonster} asOrderedCollection] value: self game level builder]).	morph addMorphBack: (self createButtonNamed: '+10' onStateChange: true onAction: [		10 timesRepeat: [[:b | b positionMonsters: {b buildMonster} asOrderedCollection] value: self game level builder]]).	self addMorphBack: morph.! !!ScuCheatWindow methodsFor: 'submorphs-add/remove' stamp: 'Matthias Springer 2/10/2012 19:07'!drawPortalControls	| morph |	morph := self buildOptionMorph: 'Portal count'.	morph addMorphBack: (self createButtonNamed: '+1' onStateChange: true onAction: [		[:p | p portalsLeft: (p portalsLeft + 1)] value: self game mainPlayer]).	morph addMorphBack: (self createButtonNamed: '+10' onStateChange: true onAction: [		[:p | p portalsLeft: (p portalsLeft + 10)] value: self game mainPlayer]).	morph addMorphBack: (self createButtonNamed: '-1' onStateChange: false onAction: [		[:p | p portalsLeft: (p portalsLeft - 1)] value: self game mainPlayer]).	morph addMorphBack: (self createButtonNamed: '-10' onStateChange: false onAction: [		[:p | p portalsLeft: (p portalsLeft - 10)] value: self game mainPlayer]).	self addMorphBack: morph.! !!ScuCheatWindow methodsFor: 'dialogs' stamp: 'kf 2/10/2012 17:29:45.572'!showUserInputDialog: aRequest default: aDefaultValue	| input |	[input isNil] whileTrue: [		input := FillInTheBlankMorph request: aRequest	initialAnswer: aDefaultValue].	^ input! !ScuWindowsAsset subclass: #ScuConfigurationWindow	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Scu007-UI'!!ScuConfigurationWindow commentStamp: 'msw 2/10/2012 12:00:17.652' prior: 0!The ScuConfigurationWindow displays the start windows with configuration options.!!ScuConfigurationWindow methodsFor: 'submorphs-add/remove' stamp: 'msw 2/10/2012 12:46:35.596'!buildOptionMorph: anOption	^ self buildRowMorph		addMorph: (self buildStringMorph: anOption in: 16);		yourself! !!ScuConfigurationWindow methodsFor: 'submorphs-add/remove' stamp: 'msw 2/10/2012 12:46:15.339'!buildRowMorph	^ Morph new		color: Color transparent;		layoutPolicy: TableLayout new;		listDirection: #leftToRight;		hResizing: #spaceFill;		vResizing: #shrinkWrap;		cellInset: 10;		yourself! !!ScuConfigurationWindow methodsFor: 'submorphs-add/remove' stamp: 'Matthias Springer 2/9/2012 22:35:42.59'!buildStringMorph: aContent in: aSize	^ (StringMorph contents: aContent font: (self defaultFontIn: aSize))		color: Color white;		yourself! !!ScuConfigurationWindow methodsFor: 'submorphs-add/remove' stamp: 'Matthias Springer 2/10/2012 19:24'!buildSubMorphs	self 		layoutPolicy: TableLayout new;		listDirection: #topToBottom;		wrapCentering: #center;		hResizing: #shrinkWrap;		vResizing: #shrinkWrap;		layoutInset: 20; 		cellInset: 10.	self 		drawHeadline;		drawLevelBuilderOption;		drawGameSizeOption;		drawAnimationOption;		drawDiagonalDirectionOption;		drawDifficultyOption;		drawTileSizeOption;		drawControls.! !!ScuConfigurationWindow methodsFor: 'submorphs-add/remove' stamp: 'msw 2/5/2012 19:58:17.616'!defaultFontIn: aSize 	^ StrikeFont familyName: 'Arial' size: aSize! !!ScuConfigurationWindow methodsFor: 'submorphs-add/remove' stamp: 'Matthias Springer 2/10/2012 12:03:04.376'!drawAnimationOption	| morph button |	morph := self buildOptionMorph: 'Show animations'.	button := PluggableButtonMorph on: (		ScuPluggableButtonObject newNew: [self game configuration animationEnabled] 			and: [self game configuration animationEnabled: self game configuration animationEnabled not]) 		getState: #state action: #action.	button onColor: Color green offColor: Color red.	morph addMorphBack: button.	self addMorphBack: morph.! !!ScuConfigurationWindow methodsFor: 'submorphs-add/remove' stamp: 'msw 2/10/2012 11:52:39.087'!drawControls	| morph button |	morph := self buildRowMorph.	button := PluggableButtonMorph 		on: [ self game state: (ScuGameBuildState newIn: self game) ] 		getState: nil action: #value.	button label: 'Start Game' font: (self defaultFontIn: 16).	morph addMorphBack: button.	button := PluggableButtonMorph 		on: [ self game delete ] 		getState: nil action: #value.	button label: 'Close' font: (self defaultFontIn: 16).	morph addMorphBack: button.	self addMorphBack: morph.! !!ScuConfigurationWindow methodsFor: 'submorphs-add/remove' stamp: 'Matthias Springer 2/10/2012 11:51:07.52'!drawDiagonalDirectionOption	| morph button |	morph := self buildOptionMorph: 'Diagonal directions'.  	button := PluggableButtonMorph on: (		ScuPluggableButtonObject newNew: [self game configuration diagonalDirections ] 		and: [ self game configuration diagonalDirections: self game configuration diagonalDirections not ]) 		getState: #state action: #action.	button onColor: Color green offColor: Color red.	morph addMorphBack: button.	self addMorphBack: morph.! !!ScuConfigurationWindow methodsFor: 'submorphs-add/remove' stamp: 'Matthias Springer 2/10/2012 12:09:26.109'!drawDifficultyOption	| morph button input |	morph := self buildOptionMorph: 'Difficulty: '.	button := PluggableButtonMorph on: [		input := (self showUserInputDialog: 'Difficulty (1-10)?'		default: self game configuration difficultyLevel asString) asInteger.		self game configuration difficultyLevel: ((input  - 1) \\ 10) + 1.		button label: (((input  - 1) \\ 10) + 1)asString.] getState: nil action: #value.	button label: self game configuration difficultyLevel asString font: (self defaultFontIn: 16).	morph addMorphBack: button.	self addMorphBack: morph.! !!ScuConfigurationWindow methodsFor: 'submorphs-add/remove' stamp: 'Matthias Springer 2/10/2012 12:09:46.165'!drawGameSizeOption	| morph button inputX inputY |	morph := self buildOptionMorph: 'Game Size: '.	button := PluggableButtonMorph on: [		inputX := (self showUserInputDialog: 'New game width (tile count)?' 			default: self game configuration gameSize x asString) asInteger.		inputY := (self showUserInputDialog: 'New game height (tile count)?' 			default: self game configuration gameSize y asString) asInteger.		self game configuration gameSize: inputX@inputY.		button label: (inputX@inputY) asString] getState: nil action: #value.	button label: self game configuration gameSize asString font: (self defaultFontIn: 16).	morph addMorphBack: button.	self addMorphBack: morph.! !!ScuConfigurationWindow methodsFor: 'submorphs-add/remove' stamp: 'msw 2/5/2012 19:37:54.558'!drawHeadline	self addMorphBack: (self buildStringMorph: 'Space Clean-Up' in: 48).! !!ScuConfigurationWindow methodsFor: 'submorphs-add/remove' stamp: 'Matthias Springer 2/10/2012 12:10:25.967'!drawLevelBuilderOption	| morph button m1 m2|	morph := self buildOptionMorph: 'Level type'.  	m1 := ScuPluggableButtonObject 		newNew: [self game configuration builder = ScuRandomLevelBuilder ] 		and: [ self game configuration builder: ScuRandomLevelBuilder. m2 changed].	button := PluggableButtonMorph on: m1 getState: #state action: #action.	button onColor: Color green offColor: Color red.	button label: 'Random Level' font: (self defaultFontIn: 16).	morph addMorphBack: button.	m2 := ScuPluggableButtonObject 		newNew: [self game configuration builder = ScuGridPatternLevelBuilder ]		and: [ self game configuration builder: ScuGridPatternLevelBuilder. m1 changed].	button := PluggableButtonMorph on: m2 getState: #state action: #action.	button onColor: Color green offColor: Color red.	button label: 'Grid Level' font: (self defaultFontIn: 16).	morph addMorphBack: button.	self addMorphBack: morph.! !!ScuConfigurationWindow methodsFor: 'submorphs-add/remove' stamp: 'Matthias Springer 2/10/2012 11:59:30.674'!drawTileSizeOption	| morph button input |	morph := self buildOptionMorph: 'Tile Size: '.	button := PluggableButtonMorph on: [		input := (self showUserInputDialog: 'New tile size (px)?' 			default: self game configuration tileSize x asString) asInteger.		self game configuration tileSize: input@input.		button label: input asString] getState: nil action: #value.	button label: self game configuration tileSize x asString font: (self defaultFontIn: 16).	morph addMorphBack: button.	self addMorphBack: morph.! !!ScuConfigurationWindow methodsFor: 'dialogs' stamp: 'Matthias Springer 2/10/2012 11:57:32.34'!showUserInputDialog: aRequest default: aDefaultValue	| input |	[input isNil] whileTrue: [		input := FillInTheBlankMorph request: aRequest	initialAnswer: aDefaultValue].	^ input! !ScuWindowsAsset subclass: #ScuControls	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Scu007-UI'!!ScuControls commentStamp: 'msw 2/10/2012 11:56:27.23' prior: 0!A ScuControls is a morph which shows all control button for the game.The actions are close game, new game, new level and paused.!!ScuControls methodsFor: 'submorphs-add/remove' stamp: 'Matthias Springer 2/10/2012 18:49'!buildCheatWindow	self game cheats: (ScuCheatWindow newIn: self game).	self game cheats openInHand.! !!ScuControls methodsFor: 'submorphs-add/remove' stamp: 'Matthias Springer 2/10/2012 18:45'!buildSubMorphs	self drawButtonWithLabel: 'close' 		andAClickAction: [self game delete]		at: 20@5.	self drawButtonWithLabel: 'new level' 		andAClickAction: [self game state: (ScuGameBuildState newIn: self game)]		at: 60@5.	self drawButtonWithLabel: 'new game' 		andAClickAction: [self game state: (ScuGameConfigState newIn: self game)]		at: 127@5.	self drawButtonWithLabel: 'pause' 		andAClickAction: [self game state togglePaused]		at: 200@5.	self game configuration cheatsEnabled ifTrue: [self buildCheatWindow].! !!ScuControls methodsFor: 'submorphs-add/remove' stamp: 'dominik 1/20/2012 16:21:12.241'!drawButtonWithLabel: aString andAClickAction: aBlock at: aPosition	| button |	button := PluggableButtonMorph		on: aBlock		getState: nil		action: #value.	button label: aString;		position: aPosition.	self addMorph: button.! !ScuWindowsAsset subclass: #ScuGameInformation	instanceVariableNames: 'strings scorePoints'	classVariableNames: ''	poolDictionaries: ''	category: 'Scu007-UI'!!ScuGameInformation commentStamp: 'msw 2/10/2012 11:59:50.49' prior: 0!ScuGameInformation displays information about the main player.This are the current values for health, bucket distance, bucket damage, bucket timeout ...Additional the current score is displayed.The score is calculated:	score = deceased monsters * 10 + cleaned slimes - (time/3)The current level time is counted by ScuLevel.The morphs updates and redisplay the values every time a event is handled.!!ScuGameInformation methodsFor: 'submorphs-add/remove' stamp: 'Malte Swart 1/20/2012 13:06:42.164'!buildImageMorph: aSymbol in: aVariation at: aPosition	| imageMorph |	imageMorph := ImageMorph new.	imageMorph newForm: (self game resources formFor: aSymbol inVariation: aVariation).	self addMorph: imageMorph.	imageMorph position: aPosition.! !!ScuGameInformation methodsFor: 'submorphs-add/remove' stamp: 'dominik 2/5/2012 19:11:40.766'!buildStringMorph: aNumber at: aPosition with: aString	| stringMorph |	stringMorph := StringMorph contents: aString.	stringMorph font: (StrikeFont familyName: stringMorph font familyName size: 20).	self addMorph: stringMorph.	stringMorph position: aPosition;		color: Color white.	self strings at: aNumber put: stringMorph. ! !!ScuGameInformation methodsFor: 'submorphs-add/remove' stamp: 'dominik 2/5/2012 19:01:35.44'!buildSubMorphs	| size padding count | 	size := self game configuration tileSize.	padding := size x / 4.	size := (size x + (size x / 4))@(size y).	count := 0.	self dataToShow do: [:twoSymbols |		self buildStringMorph: twoSymbols first at: (size x)@(size y * count + padding) with: ''.		self buildImageMorph: #pickUpItem in: twoSymbols second at: 0@(size y * count).		count := count + 1].	self buildStringMorph: #score1 at: (size x)@(size y * count + padding - 5) with: ''.	self buildStringMorph: #score2 at: (size x)@(size y * count + padding + 10) with: ''.	self buildImageMorph: #score in: '' at: 0@(size y * count).! !!ScuGameInformation methodsFor: 'accessing' stamp: 'msw 2/9/2012 20:49:49.144'!buildScoreCalculationString	^ '{1} - {2}' format: {		self scorePoints. 		(self game level time/3000 printShowingDecimalPlaces: 0). }! !!ScuGameInformation methodsFor: 'accessing' stamp: 'dominik 2/5/2012 18:35:57.702'!gameTime	^ self game gameTime! !!ScuGameInformation methodsFor: 'accessing' stamp: 'msw 2/9/2012 20:49:19.04'!notifyAbout: aMessage from: aSender to: aRecipient with: aContent	aMessage = #deceased ifTrue: [		aSender itemSymbol = #monster 			ifTrue: [ self scorePoints: self scorePoints + 10 ]			ifFalse: [ self scorePoints: self scorePoints + 1 ]		].	self refreshStrings.! !!ScuGameInformation methodsFor: 'accessing' stamp: 'msw 2/9/2012 20:46:05.587'!score	^ self scorePoints - (self game level time/3000) printShowingDecimalPlaces: 0! !!ScuGameInformation methodsFor: 'accessing' stamp: 'msw 2/9/2012 20:47:07.702'!scorePoints	scorePoints ifNil: [ self scorePoints: 0 ].	^ scorePoints! !!ScuGameInformation methodsFor: 'accessing' stamp: 'msw 2/9/2012 20:46:49.179'!scorePoints: anObject	scorePoints := anObject! !!ScuGameInformation methodsFor: 'accessing' stamp: 'Malte Swart 1/12/2012 11:39:15.242'!strings	strings ifNil: [ self strings: Dictionary new ].	^ strings! !!ScuGameInformation methodsFor: 'accessing' stamp: 'Malte Swart 1/12/2012 11:38:14.385'!strings: anObject	strings := anObject! !!ScuGameInformation methodsFor: 'updating' stamp: 'msw 2/5/2012 00:57:05.164'!dataToShow	"format: {{#property_name. #icon_name}. ...}"	^ { #(distance extend) . #(damage soap) . #(limit bucket) . #(portal portal) . #(timeout fast) . #(health health)}! !!ScuGameInformation methodsFor: 'updating' stamp: 'msw 2/9/2012 20:48:32.328'!refreshStrings	| bucket |	bucket := self game mainPlayer bucketPrototype.	(self strings at: #limit) contents: self game mainPlayer bucketsLeft asString.	(self strings at: #portal) contents: self game mainPlayer portalsLeft asString.	(self strings at: #damage) contents: bucket damage asString.	(self strings at: #distance) contents: bucket distance asString.	(self strings at: #health) contents: self game mainPlayer health asString.	(self strings at: #timeout) contents: (bucket timeout * bucket stepTime / 1000 asFloat) asString, ' s'.	(self strings at: #score1) contents: (self buildScoreCalculationString).	(self strings at: #score2) contents: '= ', self score asString.! !!ScuGameInformation methodsFor: 'initialize-release' stamp: 'msw 2/5/2012 01:02:00.102'!initialize	super initialize.	self game eventDispatcher register: self for: nil.! !!ScuGameInformation methodsFor: 'stepping and presenter' stamp: 'dominik 2/5/2012 18:11:04.945'!step	self refreshStrings.! !!ScuGameInformation methodsFor: 'stepping and presenter' stamp: 'dominik 2/5/2012 18:10:35.218'!stepTime 	^200! !